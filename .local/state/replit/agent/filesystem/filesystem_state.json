{"file_contents":{"DEPLOYMENT.md":{"content":"# Deployment Guide - Satyasri Computers Ticket Management\n\nThis guide walks you through deploying the ticket management system with **frontend on Netlify** and **backend on Render**.\n\n## Overview\n\n- **Frontend**: React app deployed to Netlify\n- **Backend**: Express.js API deployed to Render  \n- **Database**: PostgreSQL (Neon recommended)\n- **Communication**: Frontend uses environment variables to connect to backend\n\n## Step 1: Database Setup (Neon)\n\n1. **Create account** at [neon.tech](https://neon.tech)\n2. **Create a new project** and database\n3. **Copy the connection string** (starts with `postgresql://`)\n4. **Save it** - you'll need this for backend deployment\n\n## Step 2: Backend Deployment (Render)\n\n1. **Create Render account** at [render.com](https://render.com)\n2. **Create a new Web Service**\n3. **Connect your GitHub repository**\n4. **Configure the service:**\n   ```\n   Name: satyasri-backend (or your choice)\n   Root Directory: backend\n   Build Command: npm install && npm run build\n   Start Command: npm start\n   ```\n5. **Set environment variables:**\n   ```\n   DATABASE_URL: [your Neon connection string]\n   NODE_ENV: production\n   ```\n6. **Deploy** - Render will build and start your backend\n7. **Note the URL** - it will be something like `https://satyasri-backend.onrender.com`\n\n## Step 3: Frontend Deployment (Netlify)\n\n### Option A: Git Integration (Recommended)\n\n1. **Push code to GitHub** (if not already done)\n2. **Create Netlify account** at [netlify.com](https://netlify.com)\n3. **Click \"New site from Git\"**\n4. **Connect your repository**\n5. **Configure build settings:**\n   ```\n   Base directory: frontend\n   Build command: npm run build\n   Publish directory: frontend/dist\n   ```\n6. **Set environment variables:**\n   - Go to Site settings â†’ Environment variables\n   - Add: `VITE_API_URL` = `https://your-backend-url.onrender.com`\n7. **Deploy!**\n\n### Option B: Manual Deploy\n\n```bash\n# Navigate to frontend directory\ncd frontend\n\n# Set production API URL\necho \"VITE_API_URL=https://your-backend-url.onrender.com\" > .env\n\n# Build the project\nnpm run build\n\n# Install Netlify CLI\nnpm install -g netlify-cli\n\n# Deploy\nnetlify deploy --prod --dir=dist\n```\n\n## Step 4: Verification\n\n1. **Check backend health:**\n   ```\n   GET https://your-backend-url.onrender.com/health\n   ```\n\n2. **Test frontend:**\n   - Visit your Netlify URL\n   - Try logging in\n   - Create a test ticket\n\n3. **Check browser console** for any connection errors\n\n## Environment Variables Summary\n\n### Backend (.env)\n```bash\nDATABASE_URL=postgresql://username:password@host/database\nNODE_ENV=production\nPORT=5000\n```\n\n### Frontend (.env)\n```bash\nVITE_API_URL=https://your-backend-url.onrender.com\n```\n\n## Common Issues & Solutions\n\n### CORS Errors\n- Backend is configured for `*.netlify.app` domains\n- If using custom domain, update CORS settings in `backend/server/index.ts`\n\n### Database Connection Issues\n- Verify `DATABASE_URL` is correct\n- Check Neon database is running\n- Ensure database schema is pushed: `npm run db:push`\n\n### Build Failures\n- Check Node.js version compatibility\n- Verify all dependencies are in `package.json`\n- Check build logs for specific errors\n\n### Frontend Can't Connect to Backend\n- Verify `VITE_API_URL` environment variable\n- Check backend health endpoint\n- Ensure backend is deployed and running\n\n## Free Tier Considerations\n\n- **Render Free Tier**: App sleeps after 15 minutes of inactivity\n- **Netlify Free Tier**: 100GB bandwidth, 300 build minutes\n- **Neon Free Tier**: 3GB storage, 1 database\n\nFor production use, consider upgrading to paid tiers for better performance and reliability.\n\n## Support\n\nFor deployment issues:\n- **Render**: [render.com/docs](https://render.com/docs)\n- **Netlify**: [docs.netlify.com](https://docs.netlify.com)\n- **Neon**: [neon.tech/docs](https://neon.tech/docs)","size_bytes":3830},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a ticket management system designed for \"Satyasri Computers\" service center. The application manages customers, service requests, and invoices for computer repair services. The project has been restructured for separate deployment: **frontend to Netlify** and **backend to Render**.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nDeployment preference: Separate frontend (Netlify) and backend (Render) deployments.\n\n# Project Structure\n\nThe project is now split into two independent applications:\n\n## Frontend (`/frontend`)\n- **Framework**: React with TypeScript and Vite\n- **Deployment Target**: Netlify\n- **API Communication**: Uses environment variables (`VITE_API_URL`) to connect to backend\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query for server state management\n- **UI Components**: Radix UI primitives with shadcn/ui component library\n- **Styling**: Tailwind CSS with responsive design\n\n## Backend (`/backend`) \n- **Framework**: Express.js with TypeScript\n- **Deployment Target**: Render\n- **Database**: PostgreSQL with Neon serverless hosting\n- **CORS**: Configured for Netlify domains and localhost\n- **Authentication**: JWT-based with role-based access (frontdesk/technician)\n- **API Design**: RESTful endpoints for tickets, customers, and users\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript and Vite for development tooling\n- **Routing**: Wouter for client-side routing with pages for dashboard, customers, service requests, and invoices\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **API Configuration**: Environment-based URL configuration for development and production\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript for the REST API server\n- **Database ORM**: Drizzle ORM for type-safe database operations and migrations\n- **API Design**: RESTful endpoints for CRUD operations on customers, service requests, and invoices\n- **Request Logging**: Custom middleware for API request/response logging with performance metrics\n- **Error Handling**: Centralized error handling middleware with proper HTTP status codes\n- **CORS Middleware**: Configured for cross-origin requests from Netlify deployments\n\n## Data Storage\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **Schema Design**: Three main entities (customers, service requests, invoices) with proper foreign key relationships\n- **Migrations**: Drizzle Kit for database schema migrations and management\n- **Connection**: Connection pooling using Neon's serverless PostgreSQL client\n\n## Development Setup\n- **Build System**: Vite for frontend bundling and esbuild for backend compilation\n- **Development Server**: Separate dev servers for frontend and backend\n- **File Structure**: Shared schema definitions between frontend and backend using path aliases\n- **TypeScript**: Strict mode enabled with proper path mapping for clean imports\n\n# Deployment Configuration\n\n## Frontend (Netlify)\n- **Build Command**: `npm run build`\n- **Publish Directory**: `frontend/dist`\n- **Environment Variables**: `VITE_API_URL` pointing to Render backend\n- **Auto-deploy**: Enabled for main branch pushes\n\n## Backend (Render)\n- **Root Directory**: `backend`\n- **Build Command**: `npm install && npm run build`\n- **Start Command**: `npm start`\n- **Environment Variables**: `DATABASE_URL`, `NODE_ENV=production`\n- **Auto-deploy**: Enabled for main branch pushes\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting for production database\n- **Drizzle ORM**: Database toolkit for TypeScript with schema management\n\n## UI and Styling\n- **Radix UI**: Headless component primitives for accessibility and behavior\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Lucide React**: Icon library for consistent iconography\n\n## Development Tools\n- **Vite**: Frontend build tool and development server\n- **TanStack Query**: Server state management and data fetching\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime type validation for form data and API responses\n\n## Deployment Platforms\n- **Netlify**: Frontend hosting with CDN and automatic deployments\n- **Render**: Backend hosting with automatic builds and SSL\n- **Neon**: Serverless PostgreSQL database hosting\n\n# Recent Changes (September 2025)\n\n## Project Restructuring\n- Separated single full-stack app into independent frontend and backend applications\n- Configured CORS middleware for cross-origin communication\n- Set up environment-based API URL configuration for deployment flexibility\n- Created comprehensive deployment documentation for Netlify and Render\n\n## API Communication\n- Frontend uses `VITE_API_URL` environment variable to determine backend URL\n- Backend accepts requests from Netlify domains and localhost\n- JWT authentication maintained across separate deployments\n- Proper error handling for cross-origin requests\n\n## Deployment Preparation\n- Created README files for both frontend and backend with deployment instructions\n- Set up build configurations for Netlify and Render\n- Documented environment variable requirements for both platforms\n- Prepared migration path from monolithic to microservice architecture","size_bytes":5592},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"backend/README.md":{"content":"# Backend - Satyasri Computers Ticket Management\n\nThis is the backend API for the Satyasri Computers service center ticket management system.\n\n## Getting Started\n\n### Prerequisites\n- Node.js 18+ \n- PostgreSQL database (Neon recommended)\n\n### Installation\n```bash\nnpm install\n```\n\n### Environment Variables\nCreate a `.env` file in the backend root:\n```bash\nDATABASE_URL=your_postgresql_connection_string\nPORT=5000\n```\n\n### Database Setup\n```bash\n# Push database schema\nnpm run db:push\n```\n\n### Development\n```bash\nnpm run dev\n```\n\n### Production Build\n```bash\nnpm run build\nnpm start\n```\n\n## Deployment to Render\n\n1. **Create a new Web Service** on Render\n2. **Connect your GitHub repository**\n3. **Configure the service:**\n   - **Root Directory:** `backend`\n   - **Build Command:** `npm install && npm run build`\n   - **Start Command:** `npm start`\n   - **Environment Variables:**\n     - `DATABASE_URL`: Your PostgreSQL connection string\n     - `NODE_ENV`: `production`\n\n4. **Auto-deploy** will be enabled for pushes to main branch\n\n## API Endpoints\n\n- `GET /health` - Health check\n- `POST /api/auth/login` - User authentication\n- `GET /api/tickets` - Get all tickets\n- `POST /api/tickets` - Create new ticket\n- `GET /api/customers` - Get all customers\n- `POST /api/customers` - Create new customer\n\n## CORS Configuration\n\nThe backend is configured to accept requests from:\n- `localhost:3000` (local frontend dev)\n- `localhost:5173` (Vite dev server)\n- `*.netlify.app` (Netlify deployments)\n- `*.app.netlify.com` (Netlify previews)","size_bytes":1531},"backend/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"frontend/README.md":{"content":"# Frontend - Satyasri Computers Ticket Management\n\nThis is the frontend React application for the Satyasri Computers service center ticket management system.\n\n## Getting Started\n\n### Prerequisites\n- Node.js 18+\n\n### Installation\n```bash\nnpm install\n```\n\n### Environment Variables\nCreate a `.env` file in the frontend root:\n```bash\n# For local development\nVITE_API_URL=http://localhost:5000\n\n# For production (replace with your Render backend URL)\n# VITE_API_URL=https://your-backend-app.onrender.com\n```\n\n### Development\n```bash\nnpm run dev\n```\n\n### Production Build\n```bash\nnpm run build\n```\n\n## Deployment to Netlify\n\n### Method 1: Git Integration (Recommended)\n1. **Push your code** to GitHub/GitLab/Bitbucket\n2. **Connect to Netlify:**\n   - Go to [netlify.com](https://netlify.com)\n   - Click \"New site from Git\"\n   - Connect your repository\n3. **Configure build settings:**\n   - **Base directory:** `frontend`\n   - **Build command:** `npm run build`\n   - **Publish directory:** `frontend/dist`\n4. **Set environment variables:**\n   - Go to Site settings â†’ Environment variables\n   - Add `VITE_API_URL` with your Render backend URL\n5. **Deploy!** Netlify will auto-deploy on every push\n\n### Method 2: Manual Deploy\n```bash\n# Build the project\nnpm run build\n\n# Install Netlify CLI\nnpm install -g netlify-cli\n\n# Deploy to Netlify\nnetlify deploy --prod --dir=dist\n```\n\n## Configuration\n\n### Backend URL Configuration\nThe app uses environment variables to determine the backend URL:\n\n- **Development:** Uses `http://localhost:5000`\n- **Production:** Uses `VITE_API_URL` environment variable\n\nUpdate `.env` file or Netlify environment variables to point to your deployed backend.\n\n## Features\n\n- **Dashboard** - Overview of tickets and system status\n- **Ticket Management** - Create, view, and update service tickets\n- **Customer Management** - Manage customer information\n- **User Authentication** - Role-based access (frontdesk/technician)\n- **Responsive Design** - Works on desktop and mobile devices\n\n## Tech Stack\n\n- **React 18** with TypeScript\n- **Vite** for build tooling\n- **Tailwind CSS** for styling\n- **Radix UI** for components\n- **TanStack Query** for API state management\n- **Wouter** for routing","size_bytes":2211},"frontend/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"frontend/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"frontend/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool } from \"pg\";\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport * as schema from \"@shared/schema\";\nimport \"dotenv/config\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: { rejectUnauthorized: false }, // Render requires SSL\n});\nexport const db = drizzle(pool, { schema });","size_bytes":466},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertTicketSchema, updateTicketStatusSchema, loginSchema, insertCustomerSchema } from \"@shared/schema\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\n\ninterface AuthenticatedRequest extends Request {\n  user: {\n    userId: string;\n    username: string;\n    role: string;\n  };\n}\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"satyasri-computers-secret-key\";\n\n// Middleware to verify JWT token\nfunction authenticateToken(req: any, res: any, next: any) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: 'Invalid or expired token' });\n    }\n    req.user = user;\n    next();\n  });\n}\n\n// Middleware to check role\nfunction requireRole(roles: string[]) {\n  return (req: any, res: any, next: any) => {\n    if (!req.user || !roles.includes(req.user.role)) {\n      return res.status(403).json({ message: 'Insufficient permissions' });\n    }\n    next();\n  };\n}\n\nfunction generateTicketId(date: Date, sequence: number): string {\n  const dateStr = date.toISOString().slice(0, 10).replace(/-/g, '');\n  const sequenceStr = String(sequence).padStart(4, '0');\n  return `SATY-${dateStr}-${sequenceStr}`;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password, role } = loginSchema.parse(req.body);\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // For demo purposes, we'll do simple password comparison\n      // In production, use bcrypt.compare()\n      if (user.password !== password || user.role !== role) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign(\n        { userId: user.id, username: user.username, role: user.role },\n        JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n\n      res.json({\n        user: {\n          id: user.id,\n          username: user.username,\n          fullName: user.fullName,\n          role: user.role,\n          email: user.email,\n          phone: user.phone\n        },\n        token\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  app.post(\"/api/auth/verify\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        user: {\n          id: user.id,\n          username: user.username,\n          fullName: user.fullName,\n          role: user.role,\n          email: user.email,\n          phone: user.phone\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Customer routes\n  app.get(\"/api/customers\", authenticateToken, requireRole(['frontdesk']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const customers = await storage.getAllCustomers();\n      res.json(customers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.post(\"/api/customers\", authenticateToken, requireRole(['frontdesk']), async (req, res) => {\n    try {\n      const customerData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer(customerData);\n      res.status(201).json(customer);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid customer data\" });\n    }\n  });\n\n  // Ticket routes\n  app.get(\"/api/tickets\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      let tickets;\n\n      if (req.user.role === 'technician') {\n        tickets = await storage.getTicketsByTechnician(req.user.userId);\n      } else {\n        const status = req.query.status as string;\n        if (status) {\n          tickets = await storage.getTicketsByStatus(status);\n        } else {\n          tickets = await storage.getAllTickets();\n        }\n      }\n\n      res.json(tickets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tickets\" });\n    }\n  });\n\n  app.get(\"/api/tickets/:ticketId\", authenticateToken, async (req, res) => {\n    try {\n      const ticket = await storage.getTicketByTicketId(req.params.ticketId);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      const customer = await storage.getCustomer(ticket.customerId);\n      let assignedTechnicianName: string | undefined;\n\n      if (ticket.assignedTechnician) {\n        const technician = await storage.getUser(ticket.assignedTechnician);\n        assignedTechnicianName = technician?.fullName;\n      }\n\n      res.json({\n        ...ticket,\n        customer,\n        assignedTechnicianName\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch ticket details\" });\n    }\n  });\n\n  app.post(\"/api/tickets\", authenticateToken, requireRole(['frontdesk']), async (req, res) => {\n    try {\n      const ticketData = insertTicketSchema.parse(req.body);\n      console.log('Received ticket data:', ticketData);\n\n      // Find or create customer\n      let customer = await storage.getCustomerByPhone(ticketData.customerPhone);\n      console.log('Found customer:', customer);\n      if (!customer) {\n        customer = await storage.createCustomer({\n          name: ticketData.customerName,\n          phone: ticketData.customerPhone,\n          email: ticketData.customerEmail,\n          address: ticketData.customerAddress\n        });\n      }\n\n      // Generate ticket ID\n      const today = new Date();\n      console.log('Today:', today);\n      const dateStr = today.toISOString().slice(0, 10).replace(/-/g, '');\n      console.log('Date string:', dateStr);\n      const sequence = await storage.getNextTicketSequence(dateStr);\n      console.log('Sequence number:', sequence);\n      const ticketId = generateTicketId(today, sequence);\n      console.log('Generated ticket ID:', ticketId);\n\n      // Create ticket\n      const { customerName, customerPhone, customerEmail, customerAddress, ...ticketFields } = ticketData;\n      const ticket = await storage.createTicket({\n        ...ticketFields,\n        ticketId,\n        customerId: customer.id\n      } as any);\n      console.log('Created ticket:', ticket);\n\n      res.status(201).json({ ...ticket, customer });\n    } catch (error) {\n      console.error('Error creating ticket:', error);\n      res.status(400).json({ message: \"Invalid ticket data\" });\n    }\n  });\n\n  app.patch(\"/api/tickets/:ticketId/status\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const updateData = updateTicketStatusSchema.parse(req.body);\n\n      const updatedTicket = await storage.updateTicketStatus(\n        req.params.ticketId,\n        { ...updateData, technicianId: req.user.userId }\n      );\n\n      if (!updatedTicket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      const customer = await storage.getCustomer(updatedTicket.customerId);\n      res.json({ ...updatedTicket, customer });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid update data\" });\n    }\n  });\n\n  // Stats routes\n  app.get(\"/api/stats\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const allTickets = await storage.getAllTickets();\n\n      const stats = {\n        totalTickets: allTickets.length,\n        pendingTickets: allTickets.filter(t => t.serviceStatus === 'Pending').length,\n        inProgressTickets: allTickets.filter(t => t.serviceStatus === 'In Progress').length,\n        completedTickets: allTickets.filter(t => t.serviceStatus === 'Completed').length,\n        deliveredTickets: allTickets.filter(t => t.serviceStatus === 'Delivered').length,\n        totalCustomers: (await storage.getAllCustomers()).length,\n        todayCompleted: allTickets.filter(t => {\n          const today = new Date().toISOString().slice(0, 10);\n          return t.completedAt && t.completedAt.toISOString().slice(0, 10) === today;\n        }).length,\n        monthlyRevenue: allTickets\n          .filter(t => t.finalCost && t.serviceStatus === 'Delivered')\n          .reduce((sum, t) => sum + parseFloat(t.finalCost || '0'), 0)\n      };\n\n      // Role-specific stats\n      if (req.user.role === 'technician') {\n        const myTickets = allTickets.filter(t => t.assignedTechnician === req.user.userId);\n        (stats as any).assignedToMe = myTickets.length;\n        (stats as any).myInProgress = myTickets.filter(t => t.serviceStatus === 'In Progress').length;\n        (stats as any).myCompletedToday = myTickets.filter(t => {\n          const today = new Date().toISOString().slice(0, 10);\n          return t.completedAt && t.completedAt.toISOString().slice(0, 10) === today;\n        }).length;\n      }\n\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n    // Reports routes\n  app.get(\"/api/reports\", authenticateToken, requireRole(['frontdesk']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const allTickets = await storage.getAllTickets();\n      const allCustomers = await storage.getAllCustomers();\n      // Calculate date ranges\n      const now = new Date();\n      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n      const startOfWeek = new Date(now.setDate(now.getDate() - now.getDay()));\n      const today = new Date().toISOString().slice(0, 10);\n      // Ticket status breakdown\n      const statusBreakdown = {\n        pending: allTickets.filter(t => t.serviceStatus === 'Pending').length,\n        inProgress: allTickets.filter(t => t.serviceStatus === 'In Progress').length,\n        waitingForParts: allTickets.filter(t => t.serviceStatus === 'Waiting for Parts').length,\n        testing: allTickets.filter(t => t.serviceStatus === 'Testing').length,\n        completed: allTickets.filter(t => t.serviceStatus === 'Completed').length,\n        delivered: allTickets.filter(t => t.serviceStatus === 'Delivered').length,\n      };\n      // Revenue calculations\n      const thisMonthRevenue = allTickets\n        .filter(t => t.finalCost && t.serviceStatus === 'Delivered' && \n                new Date(t.completedAt || t.createdAt) >= startOfMonth)\n        .reduce((sum, t) => sum + parseFloat(t.finalCost || '0'), 0);\n      const thisWeekRevenue = allTickets\n        .filter(t => t.finalCost && t.serviceStatus === 'Delivered' && \n                new Date(t.completedAt || t.createdAt) >= startOfWeek)\n        .reduce((sum, t) => sum + parseFloat(t.finalCost || '0'), 0);\n      const todayRevenue = allTickets\n        .filter(t => t.finalCost && t.serviceStatus === 'Delivered' && \n                (t.completedAt?.toISOString().slice(0, 10) === today))\n        .reduce((sum, t) => sum + parseFloat(t.finalCost || '0'), 0);\n      // Top issues\n      const issueCategories = allTickets.reduce((acc: any, ticket) => {\n        acc[ticket.issueCategory] = (acc[ticket.issueCategory] || 0) + 1;\n        return acc;\n      }, {});\n      // Performance metrics\n      const avgResolutionTime = allTickets\n        .filter(t => t.completedAt)\n        .reduce((sum, t) => {\n          const start = new Date(t.createdAt).getTime();\n          const end = new Date(t.completedAt!).getTime();\n          return sum + (end - start);\n        }, 0) / allTickets.filter(t => t.completedAt).length || 0;\n      const reports = {\n        summary: {\n          totalTickets: allTickets.length,\n          totalCustomers: allCustomers.length,\n          totalRevenue: allTickets\n            .filter(t => t.finalCost && t.serviceStatus === 'Delivered')\n            .reduce((sum, t) => sum + parseFloat(t.finalCost || '0'), 0),\n          avgResolutionDays: Math.round(avgResolutionTime / (1000 * 60 * 60 * 24))\n        },\n        revenue: {\n          today: todayRevenue,\n          thisWeek: thisWeekRevenue,\n          thisMonth: thisMonthRevenue\n        },\n        statusBreakdown,\n        topIssues: Object.entries(issueCategories)\n          .sort(([,a]: any, [,b]: any) => b - a)\n          .slice(0, 5)\n          .map(([category, count]) => ({ category, count })),\n        recentTickets: allTickets.slice(0, 10)\n      };\n      res.json(reports);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch reports\" });\n    }\n  });\n  // Auth logout route\n  app.post(\"/api/auth/logout\", authenticateToken, (req, res) => {\n    // With JWT, logout is handled client-side by removing the token\n    res.json({ message: \"Logged out successfully\" });\n  });\n\n\n  // Communication routes\n  app.post(\"/api/communication/send\", authenticateToken, requireRole(['frontdesk']), async (req, res) => {\n    try {\n      const { ticketId, messageType, message } = req.body;\n\n      const ticket = await storage.getTicketByTicketId(ticketId);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      const customer = await storage.getCustomer(ticket.customerId);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n\n      // TODO: Implement actual SMS/WhatsApp sending\n      // For now, just log the message\n      console.log(`Sending ${messageType} to ${customer.phone}: ${message}`);\n\n      res.json({ \n        success: true, \n        message: `${messageType.toUpperCase()} sent successfully to ${customer.name}` \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14037},"server/storage.ts":{"content":"import {\n  users,\n  customers,\n  tickets,\n  type User,\n  type InsertUser,\n  type Customer,\n  type InsertCustomer,\n  type Ticket,\n  type InsertTicket,\n  type TicketWithCustomer,\n  type UpdateTicketStatus,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, desc, sql } from \"drizzle-orm\";\nimport { ticket_sequences } from \"@shared/schema\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Customer methods\n  getCustomer(id: string): Promise<Customer | undefined>;\n  getCustomerByPhone(phone: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  getAllCustomers(): Promise<Customer[]>;\n\n  // Ticket methods\n  getTicket(id: string): Promise<Ticket | undefined>;\n  getTicketByTicketId(ticketId: string): Promise<Ticket | undefined>;\n  createTicket(\n    ticket: InsertTicket & { ticketId: string; customerId: string }\n  ): Promise<Ticket>;\n  updateTicketStatus(\n    ticketId: string,\n    update: UpdateTicketStatus & { technicianId?: string }\n  ): Promise<Ticket | undefined>;\n  getAllTickets(): Promise<TicketWithCustomer[]>;\n  getTicketsByTechnician(technicianId: string): Promise<TicketWithCustomer[]>;\n  getTicketsByStatus(status: string): Promise<TicketWithCustomer[]>;\n\n  // Utility methods\n  getNextTicketSequence(date: string): Promise<number>;\n}\n\nexport class PgStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        id,\n        createdAt: new Date(),\n        email: insertUser.email || null,\n        phone: insertUser.phone || null,\n      })\n      .returning();\n    return user;\n  }\n\n  // Customer methods\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const [customer] = await db\n      .select()\n      .from(customers)\n      .where(eq(customers.id, id));\n    return customer || undefined;\n  }\n\n  async getCustomerByPhone(phone: string): Promise<Customer | undefined> {\n    const [customer] = await db\n      .select()\n      .from(customers)\n      .where(eq(customers.phone, phone));\n    return customer || undefined;\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    const id = randomUUID();\n    const [customer] = await db\n      .insert(customers)\n      .values({\n        ...insertCustomer,\n        id,\n        createdAt: new Date(),\n        email: insertCustomer.email || null,\n        address: insertCustomer.address || null,\n      })\n      .returning();\n    return customer;\n  }\n\n  async getAllCustomers(): Promise<Customer[]> {\n    return await db.select().from(customers).orderBy(desc(customers.createdAt));\n  }\n\n  // Ticket methods\n  async getTicket(id: string): Promise<Ticket | undefined> {\n    const [ticket] = await db.select().from(tickets).where(eq(tickets.id, id));\n    return ticket || undefined;\n  }\n\n  async getTicketByTicketId(ticketId: string): Promise<Ticket | undefined> {\n    const [ticket] = await db\n      .select()\n      .from(tickets)\n      .where(eq(tickets.ticketId, ticketId));\n    return ticket || undefined;\n  }\n\n  async createTicket(\n    ticketData: InsertTicket & { ticketId: string; customerId: string }\n  ): Promise<Ticket> {\n    const id = randomUUID();\n    const [ticket] = await db\n      .insert(tickets)\n      .values({\n        ...ticketData,\n        id,\n        serviceNotes: [],\n        createdAt: new Date(),\n        completedAt: null,\n        deviceModel: ticketData.deviceModel || null,\n        serialNumber: ticketData.serialNumber || null,\n        purchaseDate: ticketData.purchaseDate || null,\n        estimatedCost:\n          ticketData.estimatedCost !== undefined &&\n          ticketData.estimatedCost !== null\n            ? String(ticketData.estimatedCost)\n            : null,\n        finalCost:\n          ticketData.finalCost !== undefined && ticketData.finalCost !== null\n            ? String(ticketData.finalCost)\n            : null,\n        priority: ticketData.priority || \"Medium\",\n        serviceStatus: ticketData.serviceStatus || \"Pending\",\n        paymentStatus: ticketData.paymentStatus || \"Pending\",\n      })\n      .returning();\n    return ticket;\n  }\n\n  async updateTicketStatus(\n    ticketId: string,\n    update: UpdateTicketStatus & { technicianId?: string }\n  ): Promise<Ticket | undefined> {\n    const [ticket] = await db\n      .select()\n      .from(tickets)\n      .where(eq(tickets.ticketId, ticketId));\n    if (!ticket) return undefined;\n\n    const [updatedTicket] = await db\n      .update(tickets)\n      .set({\n        serviceStatus: update.serviceStatus,\n        priority: update.priority || ticket.priority,\n        paymentStatus: update.paymentStatus || ticket.paymentStatus,\n        finalCost:\n          update.finalCost !== undefined && update.finalCost !== null\n            ? String(update.finalCost)\n            : ticket.finalCost,\n        assignedTechnician: update.technicianId || ticket.assignedTechnician,\n        completedAt:\n          update.serviceStatus === \"Completed\"\n            ? new Date()\n            : ticket.completedAt,\n      })\n      .where(eq(tickets.id, ticket.id))\n      .returning();\n\n    // Add service note if provided\n    if (update.serviceNote && update.technicianId) {\n      const newNote = {\n        id: randomUUID(),\n        note: update.serviceNote,\n        technicianId: update.technicianId,\n        timestamp: new Date().toISOString(),\n        photos: update.photos || [],\n      };\n\n      await db\n        .update(tickets)\n        .set({\n          serviceNotes: sql`${tickets.serviceNotes} || ${JSON.stringify([\n            newNote,\n          ])}::jsonb`,\n        })\n        .where(eq(tickets.ticketId, ticketId));\n    }\n\n    return updatedTicket || undefined;\n  }\n\n  async getAllTickets(): Promise<TicketWithCustomer[]> {\n    // Join tickets, customers, and users for technician name\n    const rows = await db\n      .select({\n        id: tickets.id,\n        ticketId: tickets.ticketId,\n        customerId: tickets.customerId,\n        deviceType: tickets.deviceType,\n        deviceModel: tickets.deviceModel,\n        serialNumber: tickets.serialNumber,\n        purchaseDate: tickets.purchaseDate,\n        issueCategory: tickets.issueCategory,\n        problemDescription: tickets.problemDescription,\n        priority: tickets.priority,\n        serviceStatus: tickets.serviceStatus,\n        paymentStatus: tickets.paymentStatus,\n        estimatedCost: tickets.estimatedCost,\n        finalCost: tickets.finalCost,\n        assignedTechnician: tickets.assignedTechnician,\n        serviceNotes: tickets.serviceNotes,\n        createdAt: tickets.createdAt,\n        completedAt: tickets.completedAt,\n        customerName: customers.name,\n        customerPhone: customers.phone,\n        customerEmail: customers.email,\n        customerAddress: customers.address,\n        customerCreatedAt: customers.createdAt,\n        assignedTechnicianName: users.fullName,\n      })\n      .from(tickets)\n      .innerJoin(customers, eq(tickets.customerId, customers.id))\n      .leftJoin(users, eq(tickets.assignedTechnician, users.id))\n      .orderBy(desc(tickets.createdAt));\n    return rows as TicketWithCustomer[];\n  }\n\n  async getTicketsByTechnician(\n    technicianId: string\n  ): Promise<TicketWithCustomer[]> {\n    const rows = await db\n      .select({\n        ...tickets,\n        customer: customers,\n        assignedTechnicianName: sql`u.fullName`,\n      })\n      .from(tickets)\n      .innerJoin(customers, eq(tickets.customerId, customers.id))\n      .leftJoin(users, eq(tickets.assignedTechnician, users.id))\n      .where(eq(tickets.assignedTechnician, technicianId))\n      .orderBy(desc(tickets.createdAt));\n    return rows as TicketWithCustomer[];\n  }\n\n  async getTicketsByStatus(status: string): Promise<TicketWithCustomer[]> {\n    const rows = await db\n      .select({\n        ...tickets,\n        customer: customers,\n        assignedTechnicianName: sql`u.fullName`,\n      })\n      .from(tickets)\n      .innerJoin(customers, eq(tickets.customerId, customers.id))\n      .leftJoin(users, eq(tickets.assignedTechnician, users.id))\n      .where(eq(tickets.serviceStatus, status))\n      .orderBy(desc(tickets.createdAt));\n    return rows as TicketWithCustomer[];\n  }\n\n  async getNextTicketSequence(date: string): Promise<number> {\n    const [row] = await db\n      .select()\n      .from(ticket_sequences)\n      .where(eq(ticket_sequences.date, date));\n    let nextSequence = 1;\n    if (row) {\n      const currentSeq = row.sequence ? parseInt(row.sequence, 10) : 0;\n      nextSequence = currentSeq + 1;\n\n      await db\n        .update(ticket_sequences)\n        .set({ sequence: nextSequence.toString() }) // still string in DB\n        .where(eq(ticket_sequences.date, date));\n      console.log('Updated ticket sequence:', nextSequence);\n    } else {\n      await db\n        .insert(ticket_sequences)\n        .values({ date, sequence: nextSequence.toString() });\n    }\n\n    return nextSequence;\n  }\n}\n\nexport const storage = new PgStorage();\n","size_bytes":9619},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, decimal, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull(), // 'frontdesk' or 'technician'\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n\n\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\"),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tickets = pgTable(\"tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: text(\"ticket_id\").notNull().unique(), // SATY-YYYYMMDD-XXXX format\n  customerId: varchar(\"customer_id\").notNull(),\n  deviceType: text(\"device_type\").notNull(),\n  deviceModel: text(\"device_model\"),\n  serialNumber: text(\"serial_number\"),\n  purchaseDate: text(\"purchase_date\"),\n  issueCategory: text(\"issue_category\").notNull(),\n  problemDescription: text(\"problem_description\").notNull(),\n  priority: text(\"priority\").notNull().default(\"Medium\"),\n  serviceStatus: text(\"service_status\").notNull().default(\"Pending\"), // Pending, In Progress, Completed, Delivered\n  paymentStatus: text(\"payment_status\").notNull().default(\"Pending\"), // Pending, Paid\n  estimatedCost: decimal(\"estimated_cost\"),\n  finalCost: decimal(\"final_cost\"),\n  assignedTechnician: text(\"assigned_technician\"),\n  serviceNotes: json(\"service_notes\").$type<Array<{\n    id: string;\n    note: string;\n    technicianId: string;\n    timestamp: string;\n    photos?: string[];\n  }>>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const ticket_sequences = pgTable(\"ticket_sequences\", {\n  date: text(\"date\").primaryKey(),\n  sequence: decimal(\"sequence\"),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTicketSchema = createInsertSchema(tickets).omit({\n  id: true,\n  ticketId: true,\n  customerId: true,\n  createdAt: true,\n  completedAt: true,\n  serviceNotes: true,\n  assignedTechnician: true,\n}).extend({\n  customerName: z.string().min(1),\n  customerPhone: z.string().min(1),\n  customerEmail: z.string().optional(),\n  customerAddress: z.string().optional(),\n\n  deviceType: z.string().min(1),\n  deviceModel: z.string().optional(),\n  serialNumber: z.string().optional(),\n  purchaseDate: z.string().optional(),\n  issueCategory: z.string().min(1),\n\n  priority: z.string().min(1),\n  problemDescription: z.string().min(1),\n  assignedTechnician: z.string().optional(),\n\n  estimatedCost: z.preprocess(val => val === \"\" ? undefined : Number(val), z.number().optional()),\n});\n\nexport const updateTicketStatusSchema = z.object({\n  serviceStatus: z.enum([\"Pending\", \"In Progress\", \"Waiting for Parts\", \"Testing\", \"Completed\", \"Delivered\"]),\n  priority: z.enum([\"Low\", \"Medium\", \"High\", \"Urgent\"]).optional(),\n  paymentStatus: z.enum([\"Pending\", \"Paid\", \"Advance Paid\"]).optional(),\n  finalCost: z.preprocess(val => val === \"\" ? undefined : Number(val), z.number().optional()),\n  serviceNote: z.string().optional(),\n  photos: z.array(z.string()).optional(),\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1),\n  password: z.string().min(1),\n  role: z.enum([\"frontdesk\", \"technician\"]),\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertTicket = z.infer<typeof insertTicketSchema>;\nexport type Ticket = typeof tickets.$inferSelect;\nexport type UpdateTicketStatus = z.infer<typeof updateTicketStatusSchema>;\nexport type LoginRequest = z.infer<typeof loginSchema>;\n\nexport type TicketWithCustomer = Ticket & {\n  customer: Customer;\n  assignedTechnicianName?: string;\n};\n","size_bytes":4433},"backend/server/database.ts":{"content":"import pkg from \"pg\";\nconst { Pool } = pkg;\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : true,\n});\n\nexport const db = drizzle(pool, { schema });","size_bytes":484},"backend/server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\n\nconst app = express();\n\n// CORS middleware\napp.use((req, res, next) => {\n  const origin = req.headers.origin;\n  \n  // Allow requests from localhost and common deployment origins\n  const allowedOrigins = [\n    'http://localhost:3000',\n    'http://localhost:5173',\n    'https://netlify.app',\n    'https://app.netlify.com'\n  ];\n  \n  // If origin is in allowed list or no origin (server-to-server), allow it\n  if (!origin || allowedOrigins.some(allowed => origin.includes(allowed))) {\n    res.setHeader('Access-Control-Allow-Origin', origin || '*');\n  }\n  \n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n  res.setHeader('Access-Control-Allow-Credentials', 'true');\n  \n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n  \n  next();\n});\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      console.log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Health check endpoint\n  app.get('/health', (req, res) => {\n    res.json({ status: 'ok', timestamp: new Date().toISOString() });\n  });\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Default to 5000 if not specified.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    console.log(`Backend serving on port ${port}`);\n  });\n})();","size_bytes":2681},"backend/server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertTicketSchema, updateTicketStatusSchema, loginSchema, insertCustomerSchema } from \"@shared/schema\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\n\ninterface AuthenticatedRequest extends Request {\n  user: {\n    userId: string;\n    username: string;\n    role: string;\n  };\n}\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"satyasri-computers-secret-key\";\n\n// Middleware to verify JWT token\nfunction authenticateToken(req: any, res: any, next: any) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: 'Invalid or expired token' });\n    }\n    req.user = user;\n    next();\n  });\n}\n\n// Middleware to check role\nfunction requireRole(roles: string[]) {\n  return (req: any, res: any, next: any) => {\n    if (!req.user || !roles.includes(req.user.role)) {\n      return res.status(403).json({ message: 'Insufficient permissions' });\n    }\n    next();\n  };\n}\n\nfunction generateTicketId(date: Date, sequence: number): string {\n  const dateStr = date.toISOString().slice(0, 10).replace(/-/g, '');\n  const sequenceStr = String(sequence).padStart(4, '0');\n  return `SATY-${dateStr}-${sequenceStr}`;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password, role } = loginSchema.parse(req.body);\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // For demo purposes, we'll do simple password comparison\n      // In production, use bcrypt.compare()\n      if (user.password !== password || user.role !== role) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign(\n        { userId: user.id, username: user.username, role: user.role },\n        JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n\n      res.json({\n        user: {\n          id: user.id,\n          username: user.username,\n          fullName: user.fullName,\n          role: user.role,\n          email: user.email,\n          phone: user.phone\n        },\n        token\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  app.post(\"/api/auth/verify\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        user: {\n          id: user.id,\n          username: user.username,\n          fullName: user.fullName,\n          role: user.role,\n          email: user.email,\n          phone: user.phone\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Customer routes\n  app.get(\"/api/customers\", authenticateToken, requireRole(['frontdesk']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const customers = await storage.getAllCustomers();\n      res.json(customers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.post(\"/api/customers\", authenticateToken, requireRole(['frontdesk']), async (req, res) => {\n    try {\n      const customerData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer(customerData);\n      res.status(201).json(customer);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid customer data\" });\n    }\n  });\n\n  // Ticket routes\n  app.get(\"/api/tickets\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      let tickets;\n\n      if (req.user.role === 'technician') {\n        tickets = await storage.getTicketsByTechnician(req.user.userId);\n      } else {\n        const status = req.query.status as string;\n        if (status) {\n          tickets = await storage.getTicketsByStatus(status);\n        } else {\n          tickets = await storage.getAllTickets();\n        }\n      }\n\n      res.json(tickets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tickets\" });\n    }\n  });\n\n  app.get(\"/api/tickets/:ticketId\", authenticateToken, async (req, res) => {\n    try {\n      const ticket = await storage.getTicketByTicketId(req.params.ticketId);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      const customer = await storage.getCustomer(ticket.customerId);\n      let assignedTechnicianName: string | undefined;\n\n      if (ticket.assignedTechnician) {\n        const technician = await storage.getUser(ticket.assignedTechnician);\n        assignedTechnicianName = technician?.fullName;\n      }\n\n      res.json({\n        ...ticket,\n        customer,\n        assignedTechnicianName\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch ticket details\" });\n    }\n  });\n\n  app.post(\"/api/tickets\", authenticateToken, requireRole(['frontdesk']), async (req, res) => {\n    try {\n      const ticketData = insertTicketSchema.parse(req.body);\n      console.log('Received ticket data:', ticketData);\n\n      // Find or create customer\n      let customer = await storage.getCustomerByPhone(ticketData.customerPhone);\n      console.log('Found customer:', customer);\n      if (!customer) {\n        customer = await storage.createCustomer({\n          name: ticketData.customerName,\n          phone: ticketData.customerPhone,\n          email: ticketData.customerEmail,\n          address: ticketData.customerAddress\n        });\n      }\n\n      // Generate ticket ID\n      const today = new Date();\n      console.log('Today:', today);\n      const dateStr = today.toISOString().slice(0, 10).replace(/-/g, '');\n      console.log('Date string:', dateStr);\n      const sequence = await storage.getNextTicketSequence(dateStr);\n      console.log('Sequence number:', sequence);\n      const ticketId = generateTicketId(today, sequence);\n      console.log('Generated ticket ID:', ticketId);\n\n      // Create ticket\n      const { customerName, customerPhone, customerEmail, customerAddress, ...ticketFields } = ticketData;\n      const ticket = await storage.createTicket({\n        ...ticketFields,\n        ticketId,\n        customerId: customer.id\n      } as any);\n      console.log('Created ticket:', ticket);\n\n      res.status(201).json({ ...ticket, customer });\n    } catch (error) {\n      console.error('Error creating ticket:', error);\n      res.status(400).json({ message: \"Invalid ticket data\" });\n    }\n  });\n\n  app.patch(\"/api/tickets/:ticketId/status\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const updateData = updateTicketStatusSchema.parse(req.body);\n\n      const updatedTicket = await storage.updateTicketStatus(\n        req.params.ticketId,\n        { ...updateData, technicianId: req.user.userId }\n      );\n\n      if (!updatedTicket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      const customer = await storage.getCustomer(updatedTicket.customerId);\n      res.json({ ...updatedTicket, customer });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid update data\" });\n    }\n  });\n\n  // Stats routes\n  app.get(\"/api/stats\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const allTickets = await storage.getAllTickets();\n\n      const stats = {\n        totalTickets: allTickets.length,\n        pendingTickets: allTickets.filter(t => t.serviceStatus === 'Pending').length,\n        inProgressTickets: allTickets.filter(t => t.serviceStatus === 'In Progress').length,\n        completedTickets: allTickets.filter(t => t.serviceStatus === 'Completed').length,\n        deliveredTickets: allTickets.filter(t => t.serviceStatus === 'Delivered').length,\n        totalCustomers: (await storage.getAllCustomers()).length,\n        todayCompleted: allTickets.filter(t => {\n          const today = new Date().toISOString().slice(0, 10);\n          return t.completedAt && t.completedAt.toISOString().slice(0, 10) === today;\n        }).length,\n        monthlyRevenue: allTickets\n          .filter(t => t.finalCost && t.serviceStatus === 'Delivered')\n          .reduce((sum, t) => sum + parseFloat(t.finalCost || '0'), 0)\n      };\n\n      // Role-specific stats\n      if (req.user.role === 'technician') {\n        const myTickets = allTickets.filter(t => t.assignedTechnician === req.user.userId);\n        (stats as any).assignedToMe = myTickets.length;\n        (stats as any).myInProgress = myTickets.filter(t => t.serviceStatus === 'In Progress').length;\n        (stats as any).myCompletedToday = myTickets.filter(t => {\n          const today = new Date().toISOString().slice(0, 10);\n          return t.completedAt && t.completedAt.toISOString().slice(0, 10) === today;\n        }).length;\n      }\n\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n    // Reports routes\n  app.get(\"/api/reports\", authenticateToken, requireRole(['frontdesk']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const allTickets = await storage.getAllTickets();\n      const allCustomers = await storage.getAllCustomers();\n      // Calculate date ranges\n      const now = new Date();\n      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n      const startOfWeek = new Date(now.setDate(now.getDate() - now.getDay()));\n      const today = new Date().toISOString().slice(0, 10);\n      // Ticket status breakdown\n      const statusBreakdown = {\n        pending: allTickets.filter(t => t.serviceStatus === 'Pending').length,\n        inProgress: allTickets.filter(t => t.serviceStatus === 'In Progress').length,\n        waitingForParts: allTickets.filter(t => t.serviceStatus === 'Waiting for Parts').length,\n        testing: allTickets.filter(t => t.serviceStatus === 'Testing').length,\n        completed: allTickets.filter(t => t.serviceStatus === 'Completed').length,\n        delivered: allTickets.filter(t => t.serviceStatus === 'Delivered').length,\n      };\n      // Revenue calculations\n      const thisMonthRevenue = allTickets\n        .filter(t => t.finalCost && t.serviceStatus === 'Delivered' && \n                new Date(t.completedAt || t.createdAt) >= startOfMonth)\n        .reduce((sum, t) => sum + parseFloat(t.finalCost || '0'), 0);\n      const thisWeekRevenue = allTickets\n        .filter(t => t.finalCost && t.serviceStatus === 'Delivered' && \n                new Date(t.completedAt || t.createdAt) >= startOfWeek)\n        .reduce((sum, t) => sum + parseFloat(t.finalCost || '0'), 0);\n      const todayRevenue = allTickets\n        .filter(t => t.finalCost && t.serviceStatus === 'Delivered' && \n                (t.completedAt?.toISOString().slice(0, 10) === today))\n        .reduce((sum, t) => sum + parseFloat(t.finalCost || '0'), 0);\n      // Top issues\n      const issueCategories = allTickets.reduce((acc: any, ticket) => {\n        acc[ticket.issueCategory] = (acc[ticket.issueCategory] || 0) + 1;\n        return acc;\n      }, {});\n      // Performance metrics\n      const avgResolutionTime = allTickets\n        .filter(t => t.completedAt)\n        .reduce((sum, t) => {\n          const start = new Date(t.createdAt).getTime();\n          const end = new Date(t.completedAt!).getTime();\n          return sum + (end - start);\n        }, 0) / allTickets.filter(t => t.completedAt).length || 0;\n      const reports = {\n        summary: {\n          totalTickets: allTickets.length,\n          totalCustomers: allCustomers.length,\n          totalRevenue: allTickets\n            .filter(t => t.finalCost && t.serviceStatus === 'Delivered')\n            .reduce((sum, t) => sum + parseFloat(t.finalCost || '0'), 0),\n          avgResolutionDays: Math.round(avgResolutionTime / (1000 * 60 * 60 * 24))\n        },\n        revenue: {\n          today: todayRevenue,\n          thisWeek: thisWeekRevenue,\n          thisMonth: thisMonthRevenue\n        },\n        statusBreakdown,\n        topIssues: Object.entries(issueCategories)\n          .sort(([,a]: any, [,b]: any) => b - a)\n          .slice(0, 5)\n          .map(([category, count]) => ({ category, count })),\n        recentTickets: allTickets.slice(0, 10)\n      };\n      res.json(reports);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch reports\" });\n    }\n  });\n  // Auth logout route\n  app.post(\"/api/auth/logout\", authenticateToken, (req, res) => {\n    // With JWT, logout is handled client-side by removing the token\n    res.json({ message: \"Logged out successfully\" });\n  });\n\n\n  // Communication routes\n  app.post(\"/api/communication/send\", authenticateToken, requireRole(['frontdesk']), async (req, res) => {\n    try {\n      const { ticketId, messageType, message } = req.body;\n\n      const ticket = await storage.getTicketByTicketId(ticketId);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      const customer = await storage.getCustomer(ticket.customerId);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n\n      // TODO: Implement actual SMS/WhatsApp sending\n      // For now, just log the message\n      console.log(`Sending ${messageType} to ${customer.phone}: ${message}`);\n\n      res.json({ \n        success: true, \n        message: `${messageType.toUpperCase()} sent successfully to ${customer.name}` \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14037},"backend/server/storage.ts":{"content":"import {\n  users,\n  customers,\n  tickets,\n  type User,\n  type InsertUser,\n  type Customer,\n  type InsertCustomer,\n  type Ticket,\n  type InsertTicket,\n  type TicketWithCustomer,\n  type UpdateTicketStatus,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, desc, sql } from \"drizzle-orm\";\nimport { ticket_sequences } from \"@shared/schema\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Customer methods\n  getCustomer(id: string): Promise<Customer | undefined>;\n  getCustomerByPhone(phone: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  getAllCustomers(): Promise<Customer[]>;\n\n  // Ticket methods\n  getTicket(id: string): Promise<Ticket | undefined>;\n  getTicketByTicketId(ticketId: string): Promise<Ticket | undefined>;\n  createTicket(\n    ticket: InsertTicket & { ticketId: string; customerId: string }\n  ): Promise<Ticket>;\n  updateTicketStatus(\n    ticketId: string,\n    update: UpdateTicketStatus & { technicianId?: string }\n  ): Promise<Ticket | undefined>;\n  getAllTickets(): Promise<TicketWithCustomer[]>;\n  getTicketsByTechnician(technicianId: string): Promise<TicketWithCustomer[]>;\n  getTicketsByStatus(status: string): Promise<TicketWithCustomer[]>;\n\n  // Utility methods\n  getNextTicketSequence(date: string): Promise<number>;\n}\n\nexport class PgStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        id,\n        createdAt: new Date(),\n        email: insertUser.email || null,\n        phone: insertUser.phone || null,\n      })\n      .returning();\n    return user;\n  }\n\n  // Customer methods\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const [customer] = await db\n      .select()\n      .from(customers)\n      .where(eq(customers.id, id));\n    return customer || undefined;\n  }\n\n  async getCustomerByPhone(phone: string): Promise<Customer | undefined> {\n    const [customer] = await db\n      .select()\n      .from(customers)\n      .where(eq(customers.phone, phone));\n    return customer || undefined;\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    const id = randomUUID();\n    const [customer] = await db\n      .insert(customers)\n      .values({\n        ...insertCustomer,\n        id,\n        createdAt: new Date(),\n        email: insertCustomer.email || null,\n        address: insertCustomer.address || null,\n      })\n      .returning();\n    return customer;\n  }\n\n  async getAllCustomers(): Promise<Customer[]> {\n    return await db.select().from(customers).orderBy(desc(customers.createdAt));\n  }\n\n  // Ticket methods\n  async getTicket(id: string): Promise<Ticket | undefined> {\n    const [ticket] = await db.select().from(tickets).where(eq(tickets.id, id));\n    return ticket || undefined;\n  }\n\n  async getTicketByTicketId(ticketId: string): Promise<Ticket | undefined> {\n    const [ticket] = await db\n      .select()\n      .from(tickets)\n      .where(eq(tickets.ticketId, ticketId));\n    return ticket || undefined;\n  }\n\n  async createTicket(\n    ticketData: InsertTicket & { ticketId: string; customerId: string }\n  ): Promise<Ticket> {\n    const id = randomUUID();\n    const [ticket] = await db\n      .insert(tickets)\n      .values({\n        ...ticketData,\n        id,\n        serviceNotes: [],\n        createdAt: new Date(),\n        completedAt: null,\n        deviceModel: ticketData.deviceModel || null,\n        serialNumber: ticketData.serialNumber || null,\n        purchaseDate: ticketData.purchaseDate || null,\n        estimatedCost:\n          ticketData.estimatedCost !== undefined &&\n          ticketData.estimatedCost !== null\n            ? String(ticketData.estimatedCost)\n            : null,\n        finalCost:\n          ticketData.finalCost !== undefined && ticketData.finalCost !== null\n            ? String(ticketData.finalCost)\n            : null,\n        priority: ticketData.priority || \"Medium\",\n        serviceStatus: ticketData.serviceStatus || \"Pending\",\n        paymentStatus: ticketData.paymentStatus || \"Pending\",\n      })\n      .returning();\n    return ticket;\n  }\n\n  async updateTicketStatus(\n    ticketId: string,\n    update: UpdateTicketStatus & { technicianId?: string }\n  ): Promise<Ticket | undefined> {\n    const [ticket] = await db\n      .select()\n      .from(tickets)\n      .where(eq(tickets.ticketId, ticketId));\n    if (!ticket) return undefined;\n\n    const [updatedTicket] = await db\n      .update(tickets)\n      .set({\n        serviceStatus: update.serviceStatus,\n        priority: update.priority || ticket.priority,\n        paymentStatus: update.paymentStatus || ticket.paymentStatus,\n        finalCost:\n          update.finalCost !== undefined && update.finalCost !== null\n            ? String(update.finalCost)\n            : ticket.finalCost,\n        assignedTechnician: update.technicianId || ticket.assignedTechnician,\n        completedAt:\n          update.serviceStatus === \"Completed\"\n            ? new Date()\n            : ticket.completedAt,\n      })\n      .where(eq(tickets.id, ticket.id))\n      .returning();\n\n    // Add service note if provided\n    if (update.serviceNote && update.technicianId) {\n      const newNote = {\n        id: randomUUID(),\n        note: update.serviceNote,\n        technicianId: update.technicianId,\n        timestamp: new Date().toISOString(),\n        photos: update.photos || [],\n      };\n\n      await db\n        .update(tickets)\n        .set({\n          serviceNotes: sql`${tickets.serviceNotes} || ${JSON.stringify([\n            newNote,\n          ])}::jsonb`,\n        })\n        .where(eq(tickets.ticketId, ticketId));\n    }\n\n    return updatedTicket || undefined;\n  }\n\n  async getAllTickets(): Promise<TicketWithCustomer[]> {\n    // Join tickets, customers, and users for technician name\n    const rows = await db\n      .select({\n        id: tickets.id,\n        ticketId: tickets.ticketId,\n        customerId: tickets.customerId,\n        deviceType: tickets.deviceType,\n        deviceModel: tickets.deviceModel,\n        serialNumber: tickets.serialNumber,\n        purchaseDate: tickets.purchaseDate,\n        issueCategory: tickets.issueCategory,\n        problemDescription: tickets.problemDescription,\n        priority: tickets.priority,\n        serviceStatus: tickets.serviceStatus,\n        paymentStatus: tickets.paymentStatus,\n        estimatedCost: tickets.estimatedCost,\n        finalCost: tickets.finalCost,\n        assignedTechnician: tickets.assignedTechnician,\n        serviceNotes: tickets.serviceNotes,\n        createdAt: tickets.createdAt,\n        completedAt: tickets.completedAt,\n        customerName: customers.name,\n        customerPhone: customers.phone,\n        customerEmail: customers.email,\n        customerAddress: customers.address,\n        customerCreatedAt: customers.createdAt,\n        assignedTechnicianName: users.fullName,\n      })\n      .from(tickets)\n      .innerJoin(customers, eq(tickets.customerId, customers.id))\n      .leftJoin(users, eq(tickets.assignedTechnician, users.id))\n      .orderBy(desc(tickets.createdAt));\n    return rows as TicketWithCustomer[];\n  }\n\n  async getTicketsByTechnician(\n    technicianId: string\n  ): Promise<TicketWithCustomer[]> {\n    const rows = await db\n      .select({\n        ...tickets,\n        customer: customers,\n        assignedTechnicianName: sql`u.fullName`,\n      })\n      .from(tickets)\n      .innerJoin(customers, eq(tickets.customerId, customers.id))\n      .leftJoin(users, eq(tickets.assignedTechnician, users.id))\n      .where(eq(tickets.assignedTechnician, technicianId))\n      .orderBy(desc(tickets.createdAt));\n    return rows as TicketWithCustomer[];\n  }\n\n  async getTicketsByStatus(status: string): Promise<TicketWithCustomer[]> {\n    const rows = await db\n      .select({\n        ...tickets,\n        customer: customers,\n        assignedTechnicianName: sql`u.fullName`,\n      })\n      .from(tickets)\n      .innerJoin(customers, eq(tickets.customerId, customers.id))\n      .leftJoin(users, eq(tickets.assignedTechnician, users.id))\n      .where(eq(tickets.serviceStatus, status))\n      .orderBy(desc(tickets.createdAt));\n    return rows as TicketWithCustomer[];\n  }\n\n  async getNextTicketSequence(date: string): Promise<number> {\n    const [row] = await db\n      .select()\n      .from(ticket_sequences)\n      .where(eq(ticket_sequences.date, date));\n    let nextSequence = 1;\n    if (row) {\n      const currentSeq = row.sequence ? parseInt(row.sequence, 10) : 0;\n      nextSequence = currentSeq + 1;\n\n      await db\n        .update(ticket_sequences)\n        .set({ sequence: nextSequence.toString() }) // still string in DB\n        .where(eq(ticket_sequences.date, date));\n      console.log('Updated ticket sequence:', nextSequence);\n    } else {\n      await db\n        .insert(ticket_sequences)\n        .values({ date, sequence: nextSequence.toString() });\n    }\n\n    return nextSequence;\n  }\n}\n\nexport const storage = new PgStorage();\n","size_bytes":9619},"backend/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"backend/shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, decimal, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull(), // 'frontdesk' or 'technician'\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n\n\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\"),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tickets = pgTable(\"tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: text(\"ticket_id\").notNull().unique(), // SATY-YYYYMMDD-XXXX format\n  customerId: varchar(\"customer_id\").notNull(),\n  deviceType: text(\"device_type\").notNull(),\n  deviceModel: text(\"device_model\"),\n  serialNumber: text(\"serial_number\"),\n  purchaseDate: text(\"purchase_date\"),\n  issueCategory: text(\"issue_category\").notNull(),\n  problemDescription: text(\"problem_description\").notNull(),\n  priority: text(\"priority\").notNull().default(\"Medium\"),\n  serviceStatus: text(\"service_status\").notNull().default(\"Pending\"), // Pending, In Progress, Completed, Delivered\n  paymentStatus: text(\"payment_status\").notNull().default(\"Pending\"), // Pending, Paid\n  estimatedCost: decimal(\"estimated_cost\"),\n  finalCost: decimal(\"final_cost\"),\n  assignedTechnician: text(\"assigned_technician\"),\n  serviceNotes: json(\"service_notes\").$type<Array<{\n    id: string;\n    note: string;\n    technicianId: string;\n    timestamp: string;\n    photos?: string[];\n  }>>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const ticket_sequences = pgTable(\"ticket_sequences\", {\n  date: text(\"date\").primaryKey(),\n  sequence: decimal(\"sequence\"),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTicketSchema = createInsertSchema(tickets).omit({\n  id: true,\n  ticketId: true,\n  customerId: true,\n  createdAt: true,\n  completedAt: true,\n  serviceNotes: true,\n  assignedTechnician: true,\n}).extend({\n  customerName: z.string().min(1),\n  customerPhone: z.string().min(1),\n  customerEmail: z.string().optional(),\n  customerAddress: z.string().optional(),\n\n  deviceType: z.string().min(1),\n  deviceModel: z.string().optional(),\n  serialNumber: z.string().optional(),\n  purchaseDate: z.string().optional(),\n  issueCategory: z.string().min(1),\n\n  priority: z.string().min(1),\n  problemDescription: z.string().min(1),\n  assignedTechnician: z.string().optional(),\n\n  estimatedCost: z.preprocess(val => val === \"\" ? undefined : Number(val), z.number().optional()),\n});\n\nexport const updateTicketStatusSchema = z.object({\n  serviceStatus: z.enum([\"Pending\", \"In Progress\", \"Waiting for Parts\", \"Testing\", \"Completed\", \"Delivered\"]),\n  priority: z.enum([\"Low\", \"Medium\", \"High\", \"Urgent\"]).optional(),\n  paymentStatus: z.enum([\"Pending\", \"Paid\", \"Advance Paid\"]).optional(),\n  finalCost: z.preprocess(val => val === \"\" ? undefined : Number(val), z.number().optional()),\n  serviceNote: z.string().optional(),\n  photos: z.array(z.string()).optional(),\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1),\n  password: z.string().min(1),\n  role: z.enum([\"frontdesk\", \"technician\"]),\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertTicket = z.infer<typeof insertTicketSchema>;\nexport type Ticket = typeof tickets.$inferSelect;\nexport type UpdateTicketStatus = z.infer<typeof updateTicketStatusSchema>;\nexport type LoginRequest = z.infer<typeof loginSchema>;\n\nexport type TicketWithCustomer = Ticket & {\n  customer: Customer;\n  assignedTechnicianName?: string;\n};\n","size_bytes":4433},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthService } from \"@/lib/auth\";\nimport LoadingPage from \"@/pages/loading\";\nimport LoginPage from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    const initializeApp = async () => {\n      // Simulate loading time\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Check authentication\n      try {\n        if (AuthService.isAuthenticated()) {\n          await AuthService.verifyToken();\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error('Authentication verification failed:', error);\n        AuthService.clearAuth();\n        setIsAuthenticated(false);\n      }\n\n      setIsLoading(false);\n    };\n\n    initializeApp();\n  }, []);\n\n  const handleLogin = () => {\n    setIsAuthenticated(true);\n  };\n\n  if (isLoading) {\n    return <LoadingPage />;\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Toaster />\n          <LoginPage onLogin={handleLogin} />\n        </TooltipProvider>\n      </QueryClientProvider>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Switch>\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/tech-dashboard\" component={Dashboard} />\n          <Route path=\"/add-ticket\" component={Dashboard} />\n          <Route path=\"/orders\" component={Dashboard} />\n          <Route path=\"/completed-orders\" component={Dashboard} />\n          <Route path=\"/customers\" component={Dashboard} />\n          <Route path=\"/reports\" component={Dashboard} />\n          <Route path=\"/assigned-orders\" component={Dashboard} />\n          <Route path=\"/service-notes\" component={Dashboard} />\n          <Route path=\"/\" component={Dashboard} />\n          <Route component={NotFound} />\n        </Switch>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2453},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(210, 40%, 8%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 40%, 8%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 40%, 8%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(217, 91%, 95%);\n  --secondary-foreground: hsl(217, 91%, 30%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(24, 95%, 53%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(159, 78%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(217, 91%, 60%);\n  --sidebar-foreground: hsl(0, 0%, 100%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(217, 91%, 70%);\n  --sidebar-accent-foreground: hsl(0, 0%, 100%);\n  --sidebar-border: hsl(217, 91%, 50%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(210, 40%, 8%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(228, 10%, 10%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(217, 91%, 15%);\n  --secondary-foreground: hsl(217, 91%, 85%);\n  --muted: hsl(228, 10%, 15%);\n  --muted-foreground: hsl(215, 16%, 57%);\n  --accent: hsl(24, 95%, 53%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(228, 10%, 20%);\n  --input: hsl(228, 10%, 20%);\n  --ring: hsl(217, 91%, 60%);\n  --sidebar: hsl(228, 10%, 10%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(217, 91%, 30%);\n  --sidebar-accent-foreground: hsl(217, 91%, 85%);\n  --sidebar-border: hsl(228, 10%, 20%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Loading Animation */\n.loading-spinner {\n  border: 4px solid hsl(var(--muted));\n  border-left: 4px solid hsl(var(--primary));\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.fade-in {\n  animation: fadeIn 0.5s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n/* Responsive table to cards */\n@media (max-width: 768px) {\n  .table-responsive {\n    display: none;\n  }\n  .cards-responsive {\n    display: block;\n  }\n}\n\n@media (min-width: 769px) {\n  .table-responsive {\n    display: table;\n  }\n  .cards-responsive {\n    display: none;\n  }\n}\n\n/* Custom scrollbar */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(var(--primary));\n  border-radius: 3px;\n}\n","size_bytes":3586},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/customers-list.tsx":{"content":"import { useState } from \"react\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { Search, Phone, Mail, MapPin, Calendar, User } from \"lucide-react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { type Customer } from \"@shared/schema\";\r\n\r\nexport default function CustomersList() {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const { data: customers = [], isLoading } = useQuery<Customer[]>({\r\n    queryKey: ['/api/customers'],\r\n  });\r\n\r\n  const filteredCustomers = customers.filter(customer =>\r\n    customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    customer.phone.includes(searchTerm) ||\r\n    (customer.email && customer.email.toLowerCase().includes(searchTerm.toLowerCase()))\r\n  );\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        <div className=\"h-10 bg-secondary animate-pulse rounded\"></div>\r\n        {[...Array(5)].map((_, i) => (\r\n          <div key={i} className=\"h-32 bg-secondary animate-pulse rounded\"></div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h3 className=\"text-lg font-semibold text-foreground\">Customers ({customers.length})</h3>\r\n        <div className=\"relative max-w-sm\">\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\r\n          <Input\r\n            placeholder=\"Search customers...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            className=\"pl-10\"\r\n            data-testid=\"input-search-customers\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {filteredCustomers.length === 0 ? (\r\n        <Card>\r\n          <CardContent className=\"pt-6 text-center text-muted-foreground\">\r\n            {customers.length === 0 ? \"No customers found\" : \"No customers match your search\"}\r\n          </CardContent>\r\n        </Card>\r\n      ) : (\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\r\n          {filteredCustomers.map((customer) => (\r\n            <Card key={customer.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-customer-${customer.id}`}>\r\n              <CardHeader className=\"pb-3\">\r\n                <CardTitle className=\"flex items-center gap-2 text-base\">\r\n                  <User className=\"h-4 w-4 text-primary\" />\r\n                  {customer.name}\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                  <Phone className=\"h-4 w-4\" />\r\n                  <span data-testid={`text-phone-${customer.id}`}>{customer.phone}</span>\r\n                </div>\r\n                \r\n                {customer.email && (\r\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                    <Mail className=\"h-4 w-4\" />\r\n                    <span data-testid={`text-email-${customer.id}`}>{customer.email}</span>\r\n                  </div>\r\n                )}\r\n                \r\n                {customer.address && (\r\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                    <MapPin className=\"h-4 w-4\" />\r\n                    <span className=\"text-xs\" data-testid={`text-address-${customer.id}`}>{customer.address}</span>\r\n                  </div>\r\n                )}\r\n                \r\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                  <Calendar className=\"h-4 w-4\" />\r\n                  <span data-testid={`text-created-${customer.id}`}>\r\n                    Joined {new Date(customer.createdAt).toLocaleDateString()}\r\n                  </span>\r\n                </div>\r\n                \r\n                <Badge variant=\"outline\" className=\"w-fit\" data-testid={`badge-customer-${customer.id}`}>\r\n                  Customer\r\n                </Badge>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","size_bytes":4292},"client/src/components/message-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type TicketWithCustomer } from \"@shared/schema\";\n\ninterface MessageModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  ticket: TicketWithCustomer | null;\n  initialType?: 'whatsapp' | 'sms';\n}\n\nexport default function MessageModal({ \n  isOpen, \n  onClose, \n  ticket, \n  initialType = 'whatsapp' \n}: MessageModalProps) {\n  const [messageType, setMessageType] = useState(initialType);\n  const [message, setMessage] = useState(\"\");\n  const { toast } = useToast();\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { ticketId: string; messageType: string; message: string }) => {\n      const response = await apiRequest('POST', '/api/communication/send', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: data.message,\n      });\n      onClose();\n      setMessage(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleOpen = (open: boolean) => {\n    if (open && ticket) {\n      const defaultMessage = `Dear ${ticket.customer.name}, your ${ticket.deviceType}'s service is completed and out for delivery. Please collect it from Satyasri Computers.`;\n      setMessage(defaultMessage);\n      setMessageType(initialType);\n    } else {\n      onClose();\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (!ticket || !message.trim()) return;\n\n    sendMessageMutation.mutate({\n      ticketId: ticket.ticketId,\n      messageType,\n      message: message.trim()\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleOpen}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"message-modal-title\">Send Notification</DialogTitle>\n        </DialogHeader>\n        \n        {ticket && (\n          <div className=\"space-y-4\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">\n                To: {ticket.customer.name} ({ticket.customer.phone})\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                Device: {ticket.deviceType}\n              </p>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"messageType\">Message Type</Label>\n              <Select value={messageType} onValueChange={(value: 'whatsapp' | 'sms') => setMessageType(value)}>\n                <SelectTrigger data-testid=\"select-message-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"whatsapp\">WhatsApp</SelectItem>\n                  <SelectItem value=\"sms\">SMS</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"message\">Message</Label>\n              <Textarea\n                id=\"message\"\n                rows={4}\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                placeholder=\"Enter your message...\"\n                data-testid=\"textarea-message\"\n              />\n            </div>\n            \n            <div className=\"flex justify-end space-x-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => onClose()}\n                data-testid=\"button-cancel-message\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSendMessage}\n                disabled={sendMessageMutation.isPending || !message.trim()}\n                data-testid=\"button-send-message\"\n              >\n                {sendMessageMutation.isPending ? \"Sending...\" : `Send ${messageType.toUpperCase()}`}\n              </Button>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4457},"client/src/components/order-details-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { AuthService } from \"@/lib/auth\";\nimport { getStatusColor, formatDate } from \"@/lib/ticket-utils\";\nimport { type TicketWithCustomer } from \"@shared/schema\";\nimport { MessageSquare, Smartphone, Edit } from \"lucide-react\";\nimport StatusUpdateForm from \"./status-update-form\";\nimport { useState } from \"react\";\n\ninterface OrderDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  ticketId: string | null;\n  onSendMessage: (ticket: TicketWithCustomer, type: 'whatsapp' | 'sms') => void;\n}\n\nexport default function OrderDetailsModal({ \n  isOpen, \n  onClose, \n  ticketId, \n  onSendMessage \n}: OrderDetailsModalProps) {\n  const [showStatusUpdate, setShowStatusUpdate] = useState(false);\n  const { data: ticket, isLoading } = useQuery<TicketWithCustomer>({\n    queryKey: ['/api/tickets', ticketId],\n    enabled: isOpen && !!ticketId,\n  });\n\n  const user = AuthService.getUser();\n  const canSendMessage = user?.role === 'frontdesk' && ticket?.serviceStatus === 'Completed';\n\n  if (isLoading) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Loading...</DialogTitle>\n          </DialogHeader>\n          <div className=\"flex justify-center py-8\">\n            <div className=\"loading-spinner\"></div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  if (!ticket) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Error</DialogTitle>\n          </DialogHeader>\n          <p>Ticket not found.</p>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"modal-title\">\n            Order Details - {ticket.ticketId}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Customer Information */}\n          <div>\n            <h4 className=\"font-medium text-foreground mb-4\">Customer Information</h4>\n            <div className=\"space-y-2\">\n              <p><span className=\"text-muted-foreground\">Name:</span> <span data-testid=\"customer-name\">{ticket.customer.name}</span></p>\n              <p><span className=\"text-muted-foreground\">Phone:</span> <span data-testid=\"customer-phone\">{ticket.customer.phone}</span></p>\n              {ticket.customer.email && (\n                <p><span className=\"text-muted-foreground\">Email:</span> <span data-testid=\"customer-email\">{ticket.customer.email}</span></p>\n              )}\n              {ticket.customer.address && (\n                <p><span className=\"text-muted-foreground\">Address:</span> <span data-testid=\"customer-address\">{ticket.customer.address}</span></p>\n              )}\n            </div>\n          </div>\n          \n          {/* Device Information */}\n          <div>\n            <h4 className=\"font-medium text-foreground mb-4\">Device Information</h4>\n            <div className=\"space-y-2\">\n              <p><span className=\"text-muted-foreground\">Type:</span> <span data-testid=\"device-type\">{ticket.deviceType}</span></p>\n              {ticket.deviceModel && (\n                <p><span className=\"text-muted-foreground\">Brand/Model:</span> <span data-testid=\"device-model\">{ticket.deviceModel}</span></p>\n              )}\n              {ticket.serialNumber && (\n                <p><span className=\"text-muted-foreground\">Serial Number:</span> <span data-testid=\"device-serial\">{ticket.serialNumber}</span></p>\n              )}\n              <p><span className=\"text-muted-foreground\">Issue Category:</span> <span data-testid=\"issue-category\">{ticket.issueCategory}</span></p>\n              <p><span className=\"text-muted-foreground\">Priority:</span> \n                <Badge className={`ml-2 ${getStatusColor(ticket.priority)}`} variant=\"secondary\" data-testid=\"priority-badge\">\n                  {ticket.priority}\n                </Badge>\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        {/* Service Information */}\n        <div className=\"mt-6\">\n          <h4 className=\"font-medium text-foreground mb-4\">Service Information</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <p><span className=\"text-muted-foreground\">Service Status:</span> \n                <Badge className={`ml-2 ${getStatusColor(ticket.serviceStatus)}`} variant=\"secondary\" data-testid=\"service-status-badge\">\n                  {ticket.serviceStatus}\n                </Badge>\n              </p>\n              <p><span className=\"text-muted-foreground\">Payment Status:</span> \n                <Badge className={`ml-2 ${getStatusColor(ticket.paymentStatus)}`} variant=\"secondary\" data-testid=\"payment-status-badge\">\n                  {ticket.paymentStatus}\n                </Badge>\n              </p>\n              <p><span className=\"text-muted-foreground\">Created:</span> <span data-testid=\"created-date\">{formatDate(ticket.createdAt!)}</span></p>\n              {ticket.completedAt && (\n                <p><span className=\"text-muted-foreground\">Completed:</span> <span data-testid=\"completed-date\">{formatDate(ticket.completedAt)}</span></p>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              {ticket.estimatedCost && (\n                <p><span className=\"text-muted-foreground\">Estimated Cost:</span> <span data-testid=\"estimated-cost\">â‚¹{ticket.estimatedCost}</span></p>\n              )}\n              {ticket.finalCost && (\n                <p><span className=\"text-muted-foreground\">Final Cost:</span> <span data-testid=\"final-cost\">â‚¹{ticket.finalCost}</span></p>\n              )}\n              {ticket.assignedTechnicianName && (\n                <p><span className=\"text-muted-foreground\">Assigned Technician:</span> <span data-testid=\"assigned-technician\">{ticket.assignedTechnicianName}</span></p>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        {/* Problem Description */}\n        <div className=\"mt-6\">\n          <h4 className=\"font-medium text-foreground mb-2\">Problem Description</h4>\n          <p className=\"text-sm text-muted-foreground bg-muted p-3 rounded\" data-testid=\"problem-description\">\n            {ticket.problemDescription}\n          </p>\n        </div>\n        \n        {/* Service Notes */}\n        {ticket.serviceNotes && ticket.serviceNotes.length > 0 && (\n          <div className=\"mt-6\">\n            <h4 className=\"font-medium text-foreground mb-4\">Service Notes</h4>\n            <div className=\"space-y-3\">\n              {ticket.serviceNotes.map((note) => (\n                <div key={note.id} className=\"bg-muted p-3 rounded\" data-testid={`service-note-${note.id}`}>\n                  <p className=\"text-sm\">{note.note}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {new Date(note.timestamp).toLocaleString()} \n                  </p>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        {/* Status Update Form */}\n        {showStatusUpdate && (\n          <div className=\"mt-6 border-t border-border pt-6\">\n            <StatusUpdateForm\n              ticket={ticket}\n              onClose={() => setShowStatusUpdate(false)}\n            />\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"mt-6 flex flex-wrap gap-4\">\n          {canSendMessage && (\n            <>\n              <Button\n                onClick={() => onSendMessage(ticket, 'whatsapp')}\n                className=\"bg-green-600 hover:bg-green-700\"\n                data-testid=\"button-send-whatsapp\"\n              >\n                <MessageSquare className=\"mr-2 h-4 w-4\" />\n                Send WhatsApp\n              </Button>\n              <Button\n                onClick={() => onSendMessage(ticket, 'sms')}\n                variant=\"outline\"\n                data-testid=\"button-send-sms\"\n              >\n                <Smartphone className=\"mr-2 h-4 w-4\" />\n                Send SMS\n              </Button>\n            </>\n          )}\n          <Button\n            onClick={() => setShowStatusUpdate(!showStatusUpdate)}\n            variant=\"secondary\"\n            data-testid=\"button-update-status\"\n          >\n            <Edit className=\"mr-2 h-4 w-4\" />\n            {showStatusUpdate ? 'Hide Update' : 'Update Status'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8932},"client/src/components/orders-table.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageSquare, Edit, Eye } from \"lucide-react\";\nimport { getStatusColor, formatShortDate } from \"@/lib/ticket-utils\";\nimport { type TicketWithCustomer } from \"@shared/schema\";\n\ninterface OrdersTableProps {\n  tickets: TicketWithCustomer[];\n  onShowDetails: (ticketId: string) => void;\n  onSendMessage: (ticket: TicketWithCustomer) => void;\n  userRole: string;\n  showActions?: boolean;\n}\n\n\nexport default function OrdersTable({ \n  tickets, \n  onShowDetails, \n  onSendMessage, \n  userRole,\n  showActions = true \n}: OrdersTableProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  const filteredTickets = tickets.filter(ticket => {\n    const matchesSearch = \n      ticket.ticketId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      ticket.customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      ticket.deviceType.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      ticket.problemDescription.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || ticket.serviceStatus === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle>\n            {userRole === 'technician' ? 'My Assigned Orders' : 'All Orders'}\n          </CardTitle>\n          <div className=\"flex space-x-4\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"Pending\">Pending</SelectItem>\n                <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                <SelectItem value=\"Completed\">Completed</SelectItem>\n                <SelectItem value=\"Delivered\">Delivered</SelectItem>\n              </SelectContent>\n            </Select>\n            <Input\n              placeholder=\"Search orders...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-64\"\n              data-testid=\"input-search-orders\"\n            />\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Desktop Table */}\n        <div className=\"table-responsive overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-border\">\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Ticket ID</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground w-48\">Customer</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground w-40\">Device</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground w-60\">Issue</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Service Status</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Payment Status</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Date</th>\n                {showActions && (\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Actions</th>\n                )}\n              </tr>\n            </thead>\n            <tbody>\n              {filteredTickets.map((ticket) => (\n                <tr key={ticket.id} className=\"border-b border-border hover:bg-muted/50\">\n                  <td className=\"py-3 px-4 text-sm font-medium text-primary cursor-pointer\"\n                      onClick={() => onShowDetails(ticket.ticketId)}\n                      data-testid={`ticket-link-${ticket.ticketId}`}>\n                    {ticket.ticketId}\n                  </td>\n                  <td className=\"py-3 px-4 text-sm text-foreground w-48\">{ticket.customer?.name}</td>\n                  <td className=\"py-3 px-4 text-sm text-foreground w-40\">{ticket.deviceType}</td>\n                  <td className=\"py-3 px-4 text-sm text-foreground max-w-60 truncate\" title={ticket.problemDescription}>\n                    {ticket.problemDescription}\n                  </td>\n                  <td className=\"py-3 px-4\">\n                    <Badge className={getStatusColor(ticket.serviceStatus)} variant=\"secondary\">\n                      {ticket.serviceStatus}\n                    </Badge>\n                  </td>\n                  <td className=\"py-3 px-4\">\n                    <Badge className={getStatusColor(ticket.paymentStatus)} variant=\"secondary\">\n                      {ticket.paymentStatus}\n                    </Badge>\n                  </td>\n                  <td className=\"py-3 px-4 text-sm text-muted-foreground\">\n                    {formatShortDate(ticket.createdAt!)}\n                  </td>\n                  {showActions && (\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\"\n                          onClick={() => onShowDetails(ticket.ticketId)}\n                          data-testid={`button-view-${ticket.ticketId}`}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        {userRole === 'frontdesk' && ticket.serviceStatus === 'Completed' && (\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => onSendMessage(ticket)}\n                            data-testid={`button-message-${ticket.ticketId}`}\n                          >\n                            <MessageSquare className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </td>\n                  )}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        \n        {/* Mobile Cards */}\n        <div className=\"cards-responsive space-y-4\">\n          {filteredTickets.map((ticket) => (\n            <div key={ticket.id} className=\"border border-border rounded-lg p-4 hover:shadow-md transition-shadow duration-200\">\n              <div className=\"flex justify-between items-start mb-2\">\n                <h4 \n                  className=\"font-medium text-primary cursor-pointer\"\n                  onClick={() => onShowDetails(ticket.ticketId)}\n                  data-testid={`ticket-card-${ticket.ticketId}`}\n                >\n                  {ticket.ticketId}\n                </h4>\n                <div className=\"flex flex-col space-y-1\">\n                  <Badge className={getStatusColor(ticket.serviceStatus)} variant=\"secondary\">\n                    {ticket.serviceStatus}\n                  </Badge>\n                  <Badge className={getStatusColor(ticket.paymentStatus)} variant=\"secondary\">\n                    {ticket.paymentStatus}\n                  </Badge>\n                </div>\n              </div>\n              <p className=\"text-sm text-foreground mb-1\">{ticket.customer?.name} - {ticket.deviceType}</p>\n              <p className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">{ticket.problemDescription}</p>\n              <div className=\"flex justify-between items-center\">\n                <p className=\"text-xs text-muted-foreground\">{formatShortDate(ticket.createdAt!)}</p>\n                {showActions && (\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      size=\"sm\" \n                      variant=\"ghost\"\n                      onClick={() => onShowDetails(ticket.ticketId)}\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                    {userRole === 'frontdesk' && ticket.serviceStatus === 'Completed' && (\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\"\n                        onClick={() => onSendMessage(ticket)}\n                      >\n                        <MessageSquare className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {filteredTickets.length === 0 && (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No orders found matching your criteria.</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9213},"client/src/components/reports-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\r\nimport { TrendingUp, TrendingDown, DollarSign, Clock, Users, Wrench, BarChart3, Activity, Download } from \"lucide-react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport * as XLSX from 'xlsx';\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\ninterface ReportsData {\r\n  summary: {\r\n    totalTickets: number;\r\n    totalCustomers: number;\r\n    totalRevenue: number;\r\n    avgResolutionDays: number;\r\n  };\r\n  revenue: {\r\n    today: number;\r\n    thisWeek: number;\r\n    thisMonth: number;\r\n  };\r\n  statusBreakdown: {\r\n    pending: number;\r\n    inProgress: number;\r\n    waitingForParts: number;\r\n    testing: number;\r\n    completed: number;\r\n    delivered: number;\r\n  };\r\n  topIssues: Array<{ category: string; count: number }>;\r\n  recentTickets: any[];\r\n}\r\n\r\nexport default function ReportsDashboard() {\r\n  const { data: reports, isLoading } = useQuery<ReportsData>({\r\n    queryKey: ['/api/reports'],\r\n  });\r\n  const { data: customers = [] } = useQuery<any[]>({\r\n    queryKey: ['/api/customers'],\r\n  });\r\n\r\n  const downloadCustomersExcel = () => {\r\n    const worksheet = XLSX.utils.json_to_sheet(customers.map((customer: any) => ({\r\n      'Customer Name': customer.name,\r\n      'Phone': customer.phone,\r\n      'Email': customer.email || '',\r\n      'Address': customer.address || '',\r\n      'Joined Date': new Date(customer.createdAt).toLocaleDateString(),\r\n    })));\r\n    \r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Customers');\r\n    XLSX.writeFile(workbook, `customers_${new Date().toISOString().slice(0, 10)}.xlsx`);\r\n  };\r\n\r\n  const downloadOrdersExcel = () => {\r\n    if (!reports?.recentTickets) return;\r\n    \r\n    const worksheet = XLSX.utils.json_to_sheet(reports.recentTickets.map((ticket: any) => ({\r\n      'Ticket ID': ticket.ticketId,\r\n      'Customer Name': ticket.customer?.name || '',\r\n      'Phone': ticket.customer?.phone || '',\r\n      'Device Type': ticket.deviceType,\r\n      'Device Model': ticket.deviceModel || '',\r\n      'Issue Category': ticket.issueCategory,\r\n      'Problem Description': ticket.problemDescription,\r\n      'Status': ticket.serviceStatus,\r\n      'Priority': ticket.priority,\r\n      'Payment Status': ticket.paymentStatus,\r\n      'Estimated Cost': ticket.estimatedCost || '',\r\n      'Final Cost': ticket.finalCost || '',\r\n      'Advance Amount': ticket.advanceAmount || '0',\r\n      'Assigned Technician': ticket.assignedTechnicianName || '',\r\n      'Created Date': new Date(ticket.createdAt).toLocaleDateString(),\r\n      'Completed Date': ticket.completedAt ? new Date(ticket.completedAt).toLocaleDateString() : '',\r\n    })));\r\n    \r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Orders');\r\n    XLSX.writeFile(workbook, `orders_${new Date().toISOString().slice(0, 10)}.xlsx`);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n          {[...Array(4)].map((_, i) => (\r\n            <div key={i} className=\"h-32 bg-secondary animate-pulse rounded\"></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"grid gap-6 md:grid-cols-2\">\r\n          {[...Array(4)].map((_, i) => (\r\n            <div key={i} className=\"h-64 bg-secondary animate-pulse rounded\"></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!reports) {\r\n    return (\r\n      <Card>\r\n        <CardContent className=\"pt-6 text-center text-muted-foreground\">\r\n          Failed to load reports data\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const totalStatusCount = Object.values(reports.statusBreakdown).reduce((sum, count) => sum + count, 0);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Download Section */}\r\n      <div className=\"flex flex-wrap gap-4\">\r\n        <Button \r\n          onClick={downloadCustomersExcel}\r\n          className=\"flex items-center gap-2\"\r\n          data-testid=\"button-download-customers\"\r\n        >\r\n          <Download className=\"h-4 w-4\" />\r\n          Download Customers Excel\r\n        </Button>\r\n        <Button \r\n          onClick={downloadOrdersExcel}\r\n          variant=\"outline\"\r\n          className=\"flex items-center gap-2\"\r\n          disabled={!reports?.recentTickets?.length}\r\n          data-testid=\"button-download-orders\"\r\n        >\r\n          <Download className=\"h-4 w-4\" />\r\n          Download Orders Excel\r\n        </Button>\r\n      </div>\r\n      {/* Summary Cards */}\r\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n        <Card data-testid=\"card-total-tickets\">\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Tickets</CardTitle>\r\n            <Wrench className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-tickets\">\r\n              {reports.summary.totalTickets}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">All time tickets</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card data-testid=\"card-total-customers\">\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Customers</CardTitle>\r\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-customers\">\r\n              {reports.summary.totalCustomers}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">Registered customers</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card data-testid=\"card-total-revenue\">\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\r\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-revenue\">\r\n              â‚¹{reports.summary.totalRevenue.toLocaleString()}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">From completed orders</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card data-testid=\"card-avg-resolution\">\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Avg Resolution</CardTitle>\r\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\" data-testid=\"text-avg-resolution\">\r\n              {reports.summary.avgResolutionDays}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">Days to complete</p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Revenue Breakdown */}\r\n      <div className=\"grid gap-6 md:grid-cols-2\">\r\n        <Card data-testid=\"card-revenue-breakdown\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <TrendingUp className=\"h-5 w-5\" />\r\n              Revenue Breakdown\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-sm text-muted-foreground\">Today</span>\r\n              <span className=\"font-medium\" data-testid=\"text-revenue-today\">â‚¹{reports.revenue.today.toLocaleString()}</span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-sm text-muted-foreground\">This Week</span>\r\n              <span className=\"font-medium\" data-testid=\"text-revenue-week\">â‚¹{reports.revenue.thisWeek.toLocaleString()}</span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-sm text-muted-foreground\">This Month</span>\r\n              <span className=\"font-medium\" data-testid=\"text-revenue-month\">â‚¹{reports.revenue.thisMonth.toLocaleString()}</span>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card data-testid=\"card-service-status\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Activity className=\"h-5 w-5\" />\r\n              Service Status Breakdown\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {Object.entries(reports.statusBreakdown).map(([status, count]) => {\r\n              const percentage = totalStatusCount > 0 ? (count / totalStatusCount) * 100 : 0;\r\n              const statusLabels: Record<string, string> = {\r\n                pending: \"Pending\",\r\n                inProgress: \"In Progress\", \r\n                waitingForParts: \"Waiting for Parts\",\r\n                testing: \"Testing\",\r\n                completed: \"Completed\",\r\n                delivered: \"Delivered\"\r\n              };\r\n              \r\n              const statusColors: Record<string, string> = {\r\n                pending: \"bg-yellow-500\",\r\n                inProgress: \"bg-blue-500\",\r\n                waitingForParts: \"bg-orange-500\", \r\n                testing: \"bg-purple-500\",\r\n                completed: \"bg-green-500\",\r\n                delivered: \"bg-emerald-500\"\r\n              };\r\n\r\n              return (\r\n                <div key={status} className=\"space-y-1\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-sm text-muted-foreground\">{statusLabels[status]}</span>\r\n                    <span className=\"font-medium\" data-testid={`text-status-${status}`}>{count}</span>\r\n                  </div>\r\n                  <Progress value={percentage} className=\"h-2\" />\r\n                </div>\r\n              );\r\n            })}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card data-testid=\"card-top-issues\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <BarChart3 className=\"h-5 w-5\" />\r\n              Top Issues\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-3\">\r\n              {reports.topIssues.map((issue, index) => (\r\n                <div key={issue.category} className=\"flex justify-between items-center\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Badge variant=\"outline\" className=\"text-xs\">{index + 1}</Badge>\r\n                    <span className=\"text-sm\" data-testid={`text-issue-${index}`}>{issue.category}</span>\r\n                  </div>\r\n                  <span className=\"font-medium text-sm\" data-testid={`text-issue-count-${index}`}>\r\n                    {issue.count} tickets\r\n                  </span>\r\n                </div>\r\n              ))}\r\n              {reports.topIssues.length === 0 && (\r\n                <p className=\"text-sm text-muted-foreground text-center\">No issues reported yet</p>\r\n              )}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card data-testid=\"card-recent-activity\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Clock className=\"h-5 w-5\" />\r\n              Recent Activity\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-3\">\r\n              {reports.recentTickets.slice(0, 5).map((ticket) => (\r\n                <div key={ticket.id} className=\"flex justify-between items-center border-b border-border last:border-0 pb-2 last:pb-0\">\r\n                  <div>\r\n                    <p className=\"text-sm font-medium\" data-testid={`text-ticket-${ticket.id}`}>\r\n                      {ticket.ticketId}\r\n                    </p>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      {ticket.customer?.name} - {ticket.deviceType}\r\n                    </p>\r\n                  </div>\r\n                  <Badge \r\n                    variant={ticket.serviceStatus === 'Completed' ? 'default' : 'secondary'}\r\n                    data-testid={`badge-status-${ticket.id}`}\r\n                  >\r\n                    {ticket.serviceStatus}\r\n                  </Badge>\r\n                </div>\r\n              ))}\r\n              {reports.recentTickets.length === 0 && (\r\n                <p className=\"text-sm text-muted-foreground text-center\">No recent activity</p>\r\n              )}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}","size_bytes":13034},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, Plus, List, CheckCircle, Users, BarChart3, Wrench, FileText, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { AuthService } from \"@/lib/auth\";\n\ninterface SidebarProps {\n  userRole: string;\n  isOpen: boolean;\n  onToggle: () => void;\n}\n\nexport default function Sidebar({ userRole, isOpen, onToggle }: SidebarProps) {\n  const [location] = useLocation();\n\n  const frontdeskNavItems = [\n    { href: \"/dashboard\", label: \"Dashboard\", icon: Home },\n    { href: \"/add-ticket\", label: \"Add Application\", icon: Plus },\n    { href: \"/orders\", label: \"All Orders\", icon: List },\n    { href: \"/completed-orders\", label: \"Completed Orders\", icon: CheckCircle },\n    { href: \"/customers\", label: \"Customers\", icon: Users },\n    { href: \"/reports\", label: \"Reports\", icon: BarChart3 },\n  ];\n\n  const technicianNavItems = [\n    { href: \"/tech-dashboard\", label: \"Dashboard\", icon: Home },\n    { href: \"/assigned-orders\", label: \"Assigned Orders\", icon: Wrench },\n    { href: \"/service-notes\", label: \"Service Notes\", icon: FileText },\n  ];\n\n  const navItems = userRole === 'frontdesk' ? frontdeskNavItems : technicianNavItems;\n\n  const handleLinkClick = () => {\n    if (window.innerWidth < 1024) {\n      onToggle();\n    }\n  };\n\n  return (\n    <>\n      {/* Mobile overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\"\n          onClick={onToggle}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`fixed inset-y-0 left-0 z-50 w-64 bg-sidebar transform transition-transform duration-200 ease-in-out lg:translate-x-0 ${\n        isOpen ? 'translate-x-0' : '-translate-x-full'\n      }`}>\n        <div className=\"flex items-center justify-center h-16 bg-sidebar-primary\">\n          <h1 className=\"text-xl font-bold text-sidebar-primary-foreground\">Satyasri</h1>\n        </div>\n        \n        <nav className=\"mt-8 px-4\">\n          <div className=\"space-y-2\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n              \n              return (\n                <Link key={item.href} href={item.href}>\n                  <Button\n                    variant=\"ghost\"\n                    className={`w-full justify-start text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground ${\n                      isActive ? 'bg-sidebar-accent text-sidebar-accent-foreground' : ''\n                    }`}\n                    onClick={handleLinkClick}\n                    data-testid={`nav-${item.href.slice(1)}`}\n                  >\n                    <Icon className=\"mr-3 h-4 w-4\" />\n                    {item.label}\n                  </Button>\n                </Link>\n              );\n            })}\n          </div>\n          \n          <div className=\"mt-8 pt-8 border-t border-sidebar-border\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\"\n              onClick={AuthService.logout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"mr-3 h-4 w-4\" />\n              Logout\n            </Button>\n          </div>\n        </nav>\n      </div>\n    </>\n  );\n}\n","size_bytes":3393},"client/src/components/stats-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Clock, CheckCircle, Users, IndianRupee, Wrench, Cog } from \"lucide-react\";\n\ninterface StatsCardsProps {\n  stats: any;\n  userRole: string;\n}\n\nexport default function StatsCards({ stats, userRole }: StatsCardsProps) {\n  if (userRole === 'technician') {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Assigned Orders</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-assigned-orders\">\n                  {stats.assignedToMe || 0}\n                </p>\n              </div>\n              <div className=\"bg-accent/10 p-3 rounded-full\">\n                <Wrench className=\"text-accent h-6 w-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">In Progress</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-in-progress\">\n                  {stats.myInProgress || 0}\n                </p>\n              </div>\n              <div className=\"bg-blue-100 p-3 rounded-full\">\n                <Cog className=\"text-blue-600 h-6 w-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Completed Today</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-completed-today\">\n                  {stats.myCompletedToday || 0}\n                </p>\n              </div>\n              <div className=\"bg-green-100 p-3 rounded-full\">\n                <CheckCircle className=\"text-green-600 h-6 w-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Ongoing Orders</p>\n              <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-ongoing-orders\">\n                {(stats.pendingTickets || 0) + (stats.inProgressTickets || 0)}\n              </p>\n            </div>\n            <div className=\"bg-accent/10 p-3 rounded-full\">\n              <Clock className=\"text-accent h-6 w-6\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Completed Today</p>\n              <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-completed-today\">\n                {stats.todayCompleted || 0}\n              </p>\n            </div>\n            <div className=\"bg-green-100 p-3 rounded-full\">\n              <CheckCircle className=\"text-green-600 h-6 w-6\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Customers</p>\n              <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-total-customers\">\n                {stats.totalCustomers || 0}\n              </p>\n            </div>\n            <div className=\"bg-blue-100 p-3 rounded-full\">\n              <Users className=\"text-blue-600 h-6 w-6\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Revenue (Month)</p>\n              <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-monthly-revenue\">\n                â‚¹{(stats.monthlyRevenue || 0).toLocaleString()}\n              </p>\n            </div>\n            <div className=\"bg-green-100 p-3 rounded-full\">\n              <IndianRupee className=\"text-green-600 h-6 w-6\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4791},"client/src/components/status-update-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { updateTicketStatusSchema, type UpdateTicketStatus, type TicketWithCustomer } from \"@shared/schema\";\nimport { AuthService } from \"@/lib/auth\";\n\ninterface StatusUpdateFormProps {\n  ticket: TicketWithCustomer;\n  onClose: () => void;\n}\n\nexport default function StatusUpdateForm({ ticket, onClose }: StatusUpdateFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const user = AuthService.getUser();\n\n  const form = useForm<UpdateTicketStatus>({\n    resolver: zodResolver(updateTicketStatusSchema),\n    defaultValues: {\n      serviceStatus: ticket.serviceStatus as any,\n      priority: ticket.priority as any,\n      paymentStatus: ticket.paymentStatus as any,\n      finalCost: ticket.finalCost || \"\",\n      serviceNote: \"\",\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async (data: UpdateTicketStatus) => {\n      const response = await apiRequest('PATCH', `/api/tickets/${ticket.ticketId}/status`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Status updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/tickets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/tickets', ticket.ticketId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      onClose();\n    },\n    onError: (error) => {\n      console.error('Status update error:', error);\n      toast({\n        title: \"Error\",\n        description: `Failed to update status: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UpdateTicketStatus) => {\n    updateStatusMutation.mutate(data);\n  };\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle>Update Status - {ticket.ticketId}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          {/* Service Status - Technicians can update */}\n          {user?.role === 'technician' && (\n            <div>\n              <Label>Service Status</Label>\n              <Select \n                defaultValue={ticket.serviceStatus}\n                onValueChange={(value) => form.setValue(\"serviceStatus\", value as any)}\n              >\n                <SelectTrigger data-testid=\"select-service-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Pending\">Pending</SelectItem>\n                  <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                  <SelectItem value=\"Waiting for Parts\">Waiting for Parts</SelectItem>\n                  <SelectItem value=\"Testing\">Testing</SelectItem>\n                  <SelectItem value=\"Completed\">Completed</SelectItem>\n                  <SelectItem value=\"Delivered\">Delivered</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          {/* Priority */}\n          <div>\n            <Label>Priority</Label>\n            <Select \n              defaultValue={ticket.priority}\n              onValueChange={(value) => form.setValue(\"priority\", value as any)}\n            >\n              <SelectTrigger data-testid=\"select-priority\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Low\">Low</SelectItem>\n                <SelectItem value=\"Medium\">Medium</SelectItem>\n                <SelectItem value=\"High\">High</SelectItem>\n                <SelectItem value=\"Urgent\">Urgent</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Payment Status - Both roles can update */}\n          <div>\n            <Label>Payment Status</Label>\n            <Select \n              defaultValue={ticket.paymentStatus}\n              onValueChange={(value) => form.setValue(\"paymentStatus\", value as any)}\n            >\n              <SelectTrigger data-testid=\"select-payment-status\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Pending\">Pending</SelectItem>\n                <SelectItem value=\"Advance Paid\">Advance Paid</SelectItem>\n                <SelectItem value=\"Paid\">Paid</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Final Cost */}\n          <div>\n            <Label htmlFor=\"finalCost\">Final Cost</Label>\n            <Input\n              id=\"finalCost\"\n              type=\"number\"\n              min=\"0\"\n              step=\"0.01\"\n              placeholder=\"â‚¹\"\n              {...form.register(\"finalCost\")}\n              data-testid=\"input-final-cost\"\n            />\n          </div>\n\n          {/* Service Note - Technicians only */}\n          {user?.role === 'technician' && (\n            <div>\n              <Label htmlFor=\"serviceNote\">Service Note</Label>\n              <Textarea\n                id=\"serviceNote\"\n                rows={3}\n                placeholder=\"Add a note about the service...\"\n                {...form.register(\"serviceNote\")}\n                data-testid=\"textarea-service-note\"\n              />\n            </div>\n          )}\n\n          {/* Form Actions */}\n          <div className=\"flex justify-end space-x-4 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              data-testid=\"button-cancel-update\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={updateStatusMutation.isPending}\n              data-testid=\"button-save-update\"\n            >\n              {updateStatusMutation.isPending ? \"Updating...\" : \"Update Status\"}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6606},"client/src/components/ticket-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertTicketSchema, type InsertTicket } from \"../../../shared/schema\";\nimport { useLocation } from \"wouter\";\n\nexport default function TicketForm() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertTicket>({\n    resolver: zodResolver(insertTicketSchema),\n    defaultValues: {\n      customerName: \"\",\n      customerPhone: \"\",\n      customerEmail: \"\",\n      customerAddress: \"\",\n      deviceType: \"\",\n      deviceModel: \"\",\n      serialNumber: \"\",\n      purchaseDate: \"\",\n      issueCategory: \"\",\n      priority: \"Medium\",\n      problemDescription: \"\",\n      estimatedCost: 500,\n    },\n    mode: \"onChange\",\n  });\n\n  const createTicketMutation = useMutation({\n    mutationFn: async (data: InsertTicket) => {\n      const response = await apiRequest('POST', '/api/tickets', data);\n      return response.json();\n    },\n    onSuccess: (ticket) => {\n      toast({\n        title: \"Success\",\n        description: `Ticket created successfully! ID: ${ticket.ticketId}`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/tickets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      form.reset();\n      setLocation('/dashboard');\n    },\n    onError: (error) => {\n      console.error('Ticket creation error:', error);\n      toast({\n        title: \"Error\",\n        description: `Failed to create ticket: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Initialize select field values\n  useEffect(() => {\n    form.setValue(\"priority\", \"Medium\");\n  }, [form]);\n\n  const onSubmit = (data: InsertTicket) => {\n    console.log('Form data:', data);\n    console.log('Form errors:', form.formState.errors);\n    createTicketMutation.mutate(data);\n  };\n\n  const fillTestData = () => {\n    form.setValue(\"customerName\", \"John Doe\");\n    form.setValue(\"customerPhone\", \"9876543210\");\n    form.setValue(\"customerEmail\", \"john@example.com\");\n    form.setValue(\"customerAddress\", \"123 Main Street\");\n    form.setValue(\"deviceType\", \"Gaming Laptop\");\n    form.setValue(\"deviceModel\", \"Dell XPS 15\");\n    form.setValue(\"serialNumber\", \"DL123456\");\n    form.setValue(\"issueCategory\", \"Hardware\");\n    form.setValue(\"problemDescription\", \"Laptop not turning on, power button not responding\");\n    form.setValue(\"estimatedCost\", 3000);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Create New Service Request</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Customer Information */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-foreground\">Customer Information</h4>\n              \n              <div>\n                <Label htmlFor=\"customerName\">Customer Name *</Label>\n                <Input\n                  id=\"customerName\"\n                  {...form.register(\"customerName\")}\n                  data-testid=\"input-customer-name\"\n                />\n                {form.formState.errors.customerName && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.customerName.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"customerPhone\">Phone Number *</Label>\n                <Input\n                  id=\"customerPhone\"\n                  type=\"tel\"\n                  {...form.register(\"customerPhone\")}\n                  data-testid=\"input-customer-phone\"\n                />\n                {form.formState.errors.customerPhone && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.customerPhone.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"customerEmail\">Email</Label>\n                <Input\n                  id=\"customerEmail\"\n                  type=\"email\"\n                  {...form.register(\"customerEmail\")}\n                  data-testid=\"input-customer-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"customerAddress\">Address</Label>\n                <Textarea\n                  id=\"customerAddress\"\n                  rows={3}\n                  {...form.register(\"customerAddress\")}\n                  data-testid=\"textarea-customer-address\"\n                />\n              </div>\n            </div>\n            \n            {/* Device Information */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-foreground\">Device Information</h4>\n              \n              <div>\n                <Label htmlFor=\"deviceType\">Device Type *</Label>\n                <Input\n                  id=\"deviceType\"\n                  placeholder=\"e.g., Desktop PC, Laptop, Printer, etc.\"\n                  {...form.register(\"deviceType\")}\n                  data-testid=\"input-device-type\"\n                />\n                {form.formState.errors.deviceType && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.deviceType.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"deviceModel\">Brand/Model</Label>\n                <Input\n                  id=\"deviceModel\"\n                  {...form.register(\"deviceModel\")}\n                  data-testid=\"input-device-model\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"serialNumber\">Serial Number</Label>\n                <Input\n                  id=\"serialNumber\"\n                  {...form.register(\"serialNumber\")}\n                  data-testid=\"input-serial-number\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"purchaseDate\">Purchase Date</Label>\n                <Input\n                  id=\"purchaseDate\"\n                  type=\"date\"\n                  {...form.register(\"purchaseDate\")}\n                  data-testid=\"input-purchase-date\"\n                />\n              </div>\n            </div>\n          </div>\n          \n          {/* Service Information */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium text-foreground\">Service Information</h4>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label>Issue Category *</Label>\n                <Select \n                  onValueChange={(value) => form.setValue(\"issueCategory\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-issue-category\">\n                    <SelectValue placeholder=\"Select Category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Hardware\">Hardware Issue</SelectItem>\n                    <SelectItem value=\"Software\">Software Issue</SelectItem>\n                    <SelectItem value=\"Network\">Network Issue</SelectItem>\n                    <SelectItem value=\"Maintenance\">Maintenance</SelectItem>\n                    <SelectItem value=\"Upgrade\">Upgrade</SelectItem>\n                    <SelectItem value=\"Other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.issueCategory && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.issueCategory.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label>Priority</Label>\n                <Select \n                  defaultValue=\"Medium\"\n                  onValueChange={(value) => form.setValue(\"priority\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-priority\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Low\">Low</SelectItem>\n                    <SelectItem value=\"Medium\">Medium</SelectItem>\n                    <SelectItem value=\"High\">High</SelectItem>\n                    <SelectItem value=\"Urgent\">Urgent</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"problemDescription\">Problem Description *</Label>\n              <Textarea\n                id=\"problemDescription\"\n                rows={4}\n                placeholder=\"Describe the issue in detail...\"\n                {...form.register(\"problemDescription\")}\n                data-testid=\"textarea-problem-description\"\n              />\n              {form.formState.errors.problemDescription && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.problemDescription.message}\n                </p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"estimatedCost\">Estimated Cost</Label>\n              <Input\n                id=\"estimatedCost\"\n                type=\"number\"\n                min=\"0\"\n                step=\"0.01\"\n                placeholder=\"â‚¹\"\n                {...form.register(\"estimatedCost\")}\n                data-testid=\"input-estimated-cost\"\n              />\n            </div>\n          </div>\n          \n          {/* Form Actions */}\n          <div className=\"flex justify-end space-x-4 pt-6 border-t border-border\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setLocation('/dashboard')}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={fillTestData}\n              className=\"mr-2\"\n            >\n              Fill Test Data\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createTicketMutation.isPending}\n              data-testid=\"button-create-ticket\"\n            >\n              {createTicketMutation.isPending ? \"Creating...\" : \"Create Ticket\"}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11224},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\n\nexport interface User {\n  id: string;\n  username: string;\n  fullName: string;\n  role: string;\n  email?: string;\n  phone?: string;\n}\n\nexport interface AuthResponse {\n  user: User;\n  token: string;\n}\n\nexport class AuthService {\n  private static TOKEN_KEY = 'satyasri_auth_token';\n  private static USER_KEY = 'satyasri_user';\n\n  static getToken(): string | null {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n\n  static getUser(): User | null {\n    const userData = localStorage.getItem(this.USER_KEY);\n    return userData ? JSON.parse(userData) : null;\n  }\n\n  static setAuth(authData: AuthResponse): void {\n    localStorage.setItem(this.TOKEN_KEY, authData.token);\n    localStorage.setItem(this.USER_KEY, JSON.stringify(authData.user));\n  }\n\n  static clearAuth(): void {\n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.USER_KEY);\n  }\n\n  static isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  static getAuthHeaders(): Record<string, string> {\n    const token = this.getToken();\n    return token ? { Authorization: `Bearer ${token}` } : {};\n  }\n\n  static async login(username: string, password: string, role: string): Promise<AuthResponse> {\n    const response = await apiRequest('POST', '/api/auth/login', {\n      username,\n      password,\n      role\n    });\n\n    const authData = await response.json();\n    this.setAuth(authData);\n    return authData;\n  }\n\n  static async verifyToken(): Promise<User> {\n    const token = this.getToken();\n    if (!token) {\n      throw new Error('No token found');\n    }\n\n    try {\n      const response = await fetch('/api/auth/verify', {\n        headers: this.getAuthHeaders(),\n        credentials: 'include'\n      });\n\n    if (!response.ok) {\n        this.clearAuth();\n        throw new Error('Token verification failed');\n      }\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        this.clearAuth();\n        throw new Error('Invalid response format');\n      }\n      const { user } = await response.json();\n      localStorage.setItem(this.USER_KEY, JSON.stringify(user));\n      return user;\n    } catch (error) {\n      this.clearAuth();\n      throw error;\n    }\n  }\n\n  static logout(): void {\n  AuthService.clearAuth();\n  window.location.href = '/';\n}\n\n}\n","size_bytes":2382},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { AuthService } from \"./auth\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = {\n    ...AuthService.getAuthHeaders(),\n  };\n\n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: AuthService.getAuthHeaders(),\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1570},"client/src/lib/ticket-utils.ts":{"content":"export function generateTicketId(): string {\n  const today = new Date();\n  const dateStr = today.toISOString().slice(0, 10).replace(/-/g, '');\n  const sequence = String(Math.floor(Math.random() * 9999) + 1).padStart(4, '0');\n  return `SATY-${dateStr}-${sequence}`;\n}\n\nexport function formatDate(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-IN', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n  });\n}\n\nexport function formatShortDate(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-IN', {\n    day: '2-digit',\n    month: '2-digit'\n  });\n}\n\nexport function getStatusColor(status: string): string {\n  const colors = {\n    'Pending': 'bg-yellow-100 text-yellow-700',\n    'In Progress': 'bg-blue-100 text-blue-700',\n    'Waiting for Parts': 'bg-orange-100 text-orange-700',\n    'Testing': 'bg-purple-100 text-purple-700',\n    'Completed': 'bg-green-100 text-green-700',\n    'Delivered': 'bg-gray-100 text-gray-700',\n    'Paid': 'bg-green-100 text-green-700'\n  };\n  return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-700';\n}\n\nexport function getPriorityColor(priority: string): string {\n  const colors = {\n    'Low': 'bg-green-100 text-green-700',\n    'Medium': 'bg-blue-100 text-blue-700',\n    'High': 'bg-orange-100 text-orange-700',\n    'Urgent': 'bg-red-100 text-red-700'\n  };\n  return colors[priority as keyof typeof colors] || 'bg-gray-100 text-gray-700';\n}\nexport function generateTicketId(): string {\n  const today = new Date();\n  const dateStr = today.toISOString().slice(0, 10).replace(/-/g, '');\n  const sequence = String(Math.floor(Math.random() * 9999) + 1).padStart(4, '0');\n  return `SATY-${dateStr}-${sequence}`;\n}\n\nexport function formatDate(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-IN', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n  });\n}\n\nexport function formatShortDate(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-IN', {\n    day: '2-digit',\n    month: '2-digit'\n  });\n}\n\nexport function getStatusColor(status: string): string {\n  const colors = {\n    'Pending': 'bg-yellow-100 text-yellow-700',\n    'In Progress': 'bg-blue-100 text-blue-700',\n    'Waiting for Parts': 'bg-orange-100 text-orange-700',\n    'Testing': 'bg-purple-100 text-purple-700',\n    'Completed': 'bg-green-100 text-green-700',\n    'Delivered': 'bg-gray-100 text-gray-700',\n    'Paid': 'bg-green-100 text-green-700'\n  };\n  return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-700';\n}\n\nexport function getPriorityColor(priority: string): string {\n  const colors = {\n    'Low': 'bg-green-100 text-green-700',\n    'Medium': 'bg-blue-100 text-blue-700',\n    'High': 'bg-orange-100 text-orange-700',\n    'Urgent': 'bg-red-100 text-red-700'\n  };\n  return colors[priority as keyof typeof colors] || 'bg-gray-100 text-gray-700';\n}\n","size_bytes":3110},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { AuthService } from \"@/lib/auth\";\nimport Sidebar from \"@/components/sidebar\";\nimport StatsCards from \"@/components/stats-cards\";\nimport OrdersTable from \"@/components/orders-table\";\nimport TicketForm from \"@/components/ticket-form\";\nimport OrderDetailsModal from \"@/components/order-details-modal\";\nimport MessageModal from \"@/components/message-modal\";\nimport { type TicketWithCustomer } from \"../../../shared/schema\";\nimport CustomersList from \"@/components/customers-list\";\nimport ReportsDashboard from \"@/components/reports-dashboard\";\n\nexport default function Dashboard() {\n  const [location, setLocation] = useLocation();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [selectedTicketId, setSelectedTicketId] = useState<string | null>(null);\n  const [messageTicket, setMessageTicket] = useState<TicketWithCustomer | null>(null);\n  const [messageType, setMessageType] = useState<'whatsapp' | 'sms'>('whatsapp');\n\n  const user = AuthService.getUser();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!user) {\n      setLocation('/');\n      return;\n    }\n  }, [user, setLocation]);\n\n  // Redirect to appropriate dashboard based on role\n  useEffect(() => {\n    if (user && location === '/dashboard') {\n      if (user.role === 'technician') {\n        setLocation('/tech-dashboard');\n      }\n    }\n  }, [user, location, setLocation]);\n\n  const { data: stats } = useQuery({\n    queryKey: ['/api/stats'],\n    enabled: !!user,\n  });\n\n  const { data: tickets = [] } = useQuery<TicketWithCustomer[]>({\n    queryKey: ['/api/tickets'],\n    enabled: !!user,\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  const handleShowDetails = (ticketId: string) => {\n    setSelectedTicketId(ticketId);\n  };\n\n  const handleSendMessage = (ticket: TicketWithCustomer, type: 'whatsapp' | 'sms' = 'whatsapp') => {\n    setMessageTicket(ticket);\n    setMessageType(type);\n  };\n\n  const getPageTitle = () => {\n    const pageTitles: Record<string, string> = {\n      '/dashboard': 'Dashboard',\n      '/tech-dashboard': 'Technician Dashboard',\n      '/add-ticket': 'Create New Ticket',\n      '/orders': 'All Orders',\n      '/completed-orders': 'Completed Orders',\n      '/customers': 'Customers',\n      '/reports': 'Reports',\n      '/assigned-orders': 'Assigned Orders',\n      '/service-notes': 'Service Notes',\n    };\n    return pageTitles[location] || 'Dashboard';\n  };\n\n  const renderContent = () => {\n    switch (location) {\n      case '/add-ticket':\n        return user.role === 'frontdesk' ? <TicketForm /> : null;\n\n      case '/orders':\n        return user.role === 'frontdesk' ? (\n          <OrdersTable\n            tickets={tickets}\n            onShowDetails={handleShowDetails}\n            onSendMessage={handleSendMessage}\n            userRole={user.role}\n          />\n        ) : null;\n\n      case '/completed-orders':\n        const completedTickets = tickets.filter(t => t.serviceStatus === 'Completed' || t.serviceStatus === 'Delivered');\n        return user.role === 'frontdesk' ? (\n          <OrdersTable\n            tickets={completedTickets}\n            onShowDetails={handleShowDetails}\n            onSendMessage={handleSendMessage}\n            userRole={user.role}\n          />\n        ) : null;\n\n      case '/assigned-orders':\n        return user.role === 'technician' ? (\n          <OrdersTable\n            tickets={tickets}\n            onShowDetails={handleShowDetails}\n            onSendMessage={handleSendMessage}\n            userRole={user.role}\n          />\n        ) : null;\n\n      case '/tech-dashboard':\n        return user.role === 'technician' ? (\n          <div className=\"space-y-6\">\n            <StatsCards stats={stats || {}} userRole={user.role} />\n            <OrdersTable\n              tickets={tickets.slice(0, 5)}\n              onShowDetails={handleShowDetails}\n              onSendMessage={handleSendMessage}\n              userRole={user.role}\n              showActions={false}\n            />\n          </div>\n        ) : null;\n\n      case '/customers':\n        return user.role === 'frontdesk' ? <CustomersList /> : null;\n      case '/reports':\n        return user.role === 'frontdesk' ? <ReportsDashboard /> : null;\n      case '/service-notes':\n        return (\n          <div className=\"bg-card rounded-lg p-6 shadow-sm border border-border\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">{getPageTitle()}</h3>\n            <p className=\"text-muted-foreground\">This section will be implemented in a future update.</p>\n          </div>\n        );\n\n      default:\n        // Dashboard home\n        return (\n          <div className=\"space-y-6\">\n            <StatsCards stats={stats || {}} userRole={user.role} />\n\n            <div className=\"bg-card rounded-lg shadow-sm border border-border\">\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Recent Orders</h3>\n              </div>\n              <div className=\"p-6\">\n                <OrdersTable\n                  tickets={tickets.slice(0, 5)}\n                  onShowDetails={handleShowDetails}\n                  onSendMessage={handleSendMessage}\n                  userRole={user.role}\n                  showActions={false}\n                />\n              </div>\n            </div>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar \n        userRole={user.role} \n        isOpen={sidebarOpen} \n        onToggle={() => setSidebarOpen(!sidebarOpen)} \n      />\n\n      {/* Mobile menu button */}\n      <div className=\"lg:hidden fixed top-4 left-4 z-30\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setSidebarOpen(!sidebarOpen)}\n          data-testid=\"button-mobile-menu\"\n        >\n          <Menu className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"lg:ml-64\">\n        {/* Top Bar */}\n        <header className=\"bg-card shadow-sm border-b border-border\">\n          <div className=\"flex items-center justify-between px-6 py-4\">\n            <h2 className=\"text-2xl font-semibold text-foreground\" data-testid=\"page-title\">\n              {getPageTitle()}\n            </h2>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground bg-secondary px-3 py-1 rounded-full\" data-testid=\"user-role\">\n                {user.role === 'frontdesk' ? 'Front Desk Staff' : 'Technician'}\n              </span>\n              <div className=\"h-8 w-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-medium\">{user.fullName.charAt(0)}</span>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"p-6 fade-in\">\n          {renderContent()}\n        </main>\n      </div>\n\n      {/* Modals */}\n      <OrderDetailsModal\n        isOpen={!!selectedTicketId}\n        onClose={() => setSelectedTicketId(null)}\n        ticketId={selectedTicketId}\n        onSendMessage={handleSendMessage}\n      />\n\n      <MessageModal\n        isOpen={!!messageTicket}\n        onClose={() => setMessageTicket(null)}\n        ticket={messageTicket}\n        initialType={messageType}\n      />\n    </div>\n  );\n}\n","size_bytes":7554},"client/src/pages/loading.tsx":{"content":"export default function LoadingPage() {\n  return (\n    <div className=\"fixed inset-0 bg-background flex items-center justify-center z-50\">\n      <div className=\"text-center\">\n        <div className=\"loading-spinner mx-auto mb-4\"></div>\n        <h2 className=\"text-xl font-semibold text-foreground mb-2\">SATYASRI COMPUTERS</h2>\n        <p className=\"text-muted-foreground\">Loading Service Center...</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":433},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AuthService } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface LoginPageProps {\n  onLogin: () => void;\n}\n\nexport default function LoginPage({ onLogin }: LoginPageProps) {\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    role: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.username || !formData.password || !formData.role) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      await AuthService.login(formData.username, formData.password, formData.role);\n      toast({\n        title: \"Success\",\n        description: \"Logged in successfully\"\n      });\n      onLogin();\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: \"Invalid credentials. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-background flex items-center justify-center\">\n      <Card className=\"w-full max-w-md mx-4 fade-in\">\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-primary mb-2\">SATYASRI</h1>\n            <h2 className=\"text-2xl font-bold text-foreground\">COMPUTERS</h2>\n            <p className=\"text-muted-foreground mt-2\">Service Center Management</p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"username\" className=\"block text-sm font-medium text-foreground mb-2\">\n                Username\n              </Label>\n              <Input\n                id=\"username\"\n                name=\"username\"\n                type=\"text\"\n                value={formData.username}\n                onChange={(e) => handleInputChange('username', e.target.value)}\n                data-testid=\"input-username\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\" className=\"block text-sm font-medium text-foreground mb-2\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={(e) => handleInputChange('password', e.target.value)}\n                data-testid=\"input-password\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label className=\"block text-sm font-medium text-foreground mb-2\">\n                Role\n              </Label>\n              <Select value={formData.role} onValueChange={(value) => handleInputChange('role', value)}>\n                <SelectTrigger data-testid=\"select-role\">\n                  <SelectValue placeholder=\"Select Role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"frontdesk\">Front Desk Staff</SelectItem>\n                  <SelectItem value=\"technician\">Technician</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"Logging in...\" : \"Login\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-xs text-muted-foreground text-center\">\n            <p>Demo Credentials:</p>\n            <p>Frontdesk: admin / admin123</p>\n            <p>Technician: tech1 / tech123</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4389},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"frontend/client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthService } from \"@/lib/auth\";\nimport LoadingPage from \"@/pages/loading\";\nimport LoginPage from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    const initializeApp = async () => {\n      // Simulate loading time\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Check authentication\n      try {\n        if (AuthService.isAuthenticated()) {\n          await AuthService.verifyToken();\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error('Authentication verification failed:', error);\n        AuthService.clearAuth();\n        setIsAuthenticated(false);\n      }\n\n      setIsLoading(false);\n    };\n\n    initializeApp();\n  }, []);\n\n  const handleLogin = () => {\n    setIsAuthenticated(true);\n  };\n\n  if (isLoading) {\n    return <LoadingPage />;\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Toaster />\n          <LoginPage onLogin={handleLogin} />\n        </TooltipProvider>\n      </QueryClientProvider>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Switch>\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/tech-dashboard\" component={Dashboard} />\n          <Route path=\"/add-ticket\" component={Dashboard} />\n          <Route path=\"/orders\" component={Dashboard} />\n          <Route path=\"/completed-orders\" component={Dashboard} />\n          <Route path=\"/customers\" component={Dashboard} />\n          <Route path=\"/reports\" component={Dashboard} />\n          <Route path=\"/assigned-orders\" component={Dashboard} />\n          <Route path=\"/service-notes\" component={Dashboard} />\n          <Route path=\"/\" component={Dashboard} />\n          <Route component={NotFound} />\n        </Switch>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2453},"frontend/client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(210, 40%, 8%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 40%, 8%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 40%, 8%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(217, 91%, 95%);\n  --secondary-foreground: hsl(217, 91%, 30%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(24, 95%, 53%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(159, 78%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(217, 91%, 60%);\n  --sidebar-foreground: hsl(0, 0%, 100%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(217, 91%, 70%);\n  --sidebar-accent-foreground: hsl(0, 0%, 100%);\n  --sidebar-border: hsl(217, 91%, 50%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(210, 40%, 8%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(228, 10%, 10%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(217, 91%, 15%);\n  --secondary-foreground: hsl(217, 91%, 85%);\n  --muted: hsl(228, 10%, 15%);\n  --muted-foreground: hsl(215, 16%, 57%);\n  --accent: hsl(24, 95%, 53%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(228, 10%, 20%);\n  --input: hsl(228, 10%, 20%);\n  --ring: hsl(217, 91%, 60%);\n  --sidebar: hsl(228, 10%, 10%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(217, 91%, 30%);\n  --sidebar-accent-foreground: hsl(217, 91%, 85%);\n  --sidebar-border: hsl(228, 10%, 20%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Loading Animation */\n.loading-spinner {\n  border: 4px solid hsl(var(--muted));\n  border-left: 4px solid hsl(var(--primary));\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.fade-in {\n  animation: fadeIn 0.5s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n/* Responsive table to cards */\n@media (max-width: 768px) {\n  .table-responsive {\n    display: none;\n  }\n  .cards-responsive {\n    display: block;\n  }\n}\n\n@media (min-width: 769px) {\n  .table-responsive {\n    display: table;\n  }\n  .cards-responsive {\n    display: none;\n  }\n}\n\n/* Custom scrollbar */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(var(--primary));\n  border-radius: 3px;\n}\n","size_bytes":3586},"frontend/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"frontend/client/src/components/customers-list.tsx":{"content":"import { useState } from \"react\";\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { Search, Phone, Mail, MapPin, Calendar, User } from \"lucide-react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { type Customer } from \"@shared/schema\";\r\n\r\nexport default function CustomersList() {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const { data: customers = [], isLoading } = useQuery<Customer[]>({\r\n    queryKey: ['/api/customers'],\r\n  });\r\n\r\n  const filteredCustomers = customers.filter(customer =>\r\n    customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    customer.phone.includes(searchTerm) ||\r\n    (customer.email && customer.email.toLowerCase().includes(searchTerm.toLowerCase()))\r\n  );\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        <div className=\"h-10 bg-secondary animate-pulse rounded\"></div>\r\n        {[...Array(5)].map((_, i) => (\r\n          <div key={i} className=\"h-32 bg-secondary animate-pulse rounded\"></div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h3 className=\"text-lg font-semibold text-foreground\">Customers ({customers.length})</h3>\r\n        <div className=\"relative max-w-sm\">\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\r\n          <Input\r\n            placeholder=\"Search customers...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            className=\"pl-10\"\r\n            data-testid=\"input-search-customers\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {filteredCustomers.length === 0 ? (\r\n        <Card>\r\n          <CardContent className=\"pt-6 text-center text-muted-foreground\">\r\n            {customers.length === 0 ? \"No customers found\" : \"No customers match your search\"}\r\n          </CardContent>\r\n        </Card>\r\n      ) : (\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\r\n          {filteredCustomers.map((customer) => (\r\n            <Card key={customer.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-customer-${customer.id}`}>\r\n              <CardHeader className=\"pb-3\">\r\n                <CardTitle className=\"flex items-center gap-2 text-base\">\r\n                  <User className=\"h-4 w-4 text-primary\" />\r\n                  {customer.name}\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                  <Phone className=\"h-4 w-4\" />\r\n                  <span data-testid={`text-phone-${customer.id}`}>{customer.phone}</span>\r\n                </div>\r\n                \r\n                {customer.email && (\r\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                    <Mail className=\"h-4 w-4\" />\r\n                    <span data-testid={`text-email-${customer.id}`}>{customer.email}</span>\r\n                  </div>\r\n                )}\r\n                \r\n                {customer.address && (\r\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                    <MapPin className=\"h-4 w-4\" />\r\n                    <span className=\"text-xs\" data-testid={`text-address-${customer.id}`}>{customer.address}</span>\r\n                  </div>\r\n                )}\r\n                \r\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                  <Calendar className=\"h-4 w-4\" />\r\n                  <span data-testid={`text-created-${customer.id}`}>\r\n                    Joined {new Date(customer.createdAt).toLocaleDateString()}\r\n                  </span>\r\n                </div>\r\n                \r\n                <Badge variant=\"outline\" className=\"w-fit\" data-testid={`badge-customer-${customer.id}`}>\r\n                  Customer\r\n                </Badge>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","size_bytes":4292},"frontend/client/src/components/message-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type TicketWithCustomer } from \"@shared/schema\";\n\ninterface MessageModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  ticket: TicketWithCustomer | null;\n  initialType?: 'whatsapp' | 'sms';\n}\n\nexport default function MessageModal({ \n  isOpen, \n  onClose, \n  ticket, \n  initialType = 'whatsapp' \n}: MessageModalProps) {\n  const [messageType, setMessageType] = useState(initialType);\n  const [message, setMessage] = useState(\"\");\n  const { toast } = useToast();\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { ticketId: string; messageType: string; message: string }) => {\n      const response = await apiRequest('POST', '/api/communication/send', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: data.message,\n      });\n      onClose();\n      setMessage(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleOpen = (open: boolean) => {\n    if (open && ticket) {\n      const defaultMessage = `Dear ${ticket.customer.name}, your ${ticket.deviceType}'s service is completed and out for delivery. Please collect it from Satyasri Computers.`;\n      setMessage(defaultMessage);\n      setMessageType(initialType);\n    } else {\n      onClose();\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (!ticket || !message.trim()) return;\n\n    sendMessageMutation.mutate({\n      ticketId: ticket.ticketId,\n      messageType,\n      message: message.trim()\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleOpen}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"message-modal-title\">Send Notification</DialogTitle>\n        </DialogHeader>\n        \n        {ticket && (\n          <div className=\"space-y-4\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">\n                To: {ticket.customer.name} ({ticket.customer.phone})\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                Device: {ticket.deviceType}\n              </p>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"messageType\">Message Type</Label>\n              <Select value={messageType} onValueChange={(value: 'whatsapp' | 'sms') => setMessageType(value)}>\n                <SelectTrigger data-testid=\"select-message-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"whatsapp\">WhatsApp</SelectItem>\n                  <SelectItem value=\"sms\">SMS</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"message\">Message</Label>\n              <Textarea\n                id=\"message\"\n                rows={4}\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                placeholder=\"Enter your message...\"\n                data-testid=\"textarea-message\"\n              />\n            </div>\n            \n            <div className=\"flex justify-end space-x-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => onClose()}\n                data-testid=\"button-cancel-message\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSendMessage}\n                disabled={sendMessageMutation.isPending || !message.trim()}\n                data-testid=\"button-send-message\"\n              >\n                {sendMessageMutation.isPending ? \"Sending...\" : `Send ${messageType.toUpperCase()}`}\n              </Button>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4457},"frontend/client/src/components/order-details-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { AuthService } from \"@/lib/auth\";\nimport { getStatusColor, formatDate } from \"@/lib/ticket-utils\";\nimport { type TicketWithCustomer } from \"@shared/schema\";\nimport { MessageSquare, Smartphone, Edit } from \"lucide-react\";\nimport StatusUpdateForm from \"./status-update-form\";\nimport { useState } from \"react\";\n\ninterface OrderDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  ticketId: string | null;\n  onSendMessage: (ticket: TicketWithCustomer, type: 'whatsapp' | 'sms') => void;\n}\n\nexport default function OrderDetailsModal({ \n  isOpen, \n  onClose, \n  ticketId, \n  onSendMessage \n}: OrderDetailsModalProps) {\n  const [showStatusUpdate, setShowStatusUpdate] = useState(false);\n  const { data: ticket, isLoading } = useQuery<TicketWithCustomer>({\n    queryKey: ['/api/tickets', ticketId],\n    enabled: isOpen && !!ticketId,\n  });\n\n  const user = AuthService.getUser();\n  const canSendMessage = user?.role === 'frontdesk' && ticket?.serviceStatus === 'Completed';\n\n  if (isLoading) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Loading...</DialogTitle>\n          </DialogHeader>\n          <div className=\"flex justify-center py-8\">\n            <div className=\"loading-spinner\"></div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  if (!ticket) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Error</DialogTitle>\n          </DialogHeader>\n          <p>Ticket not found.</p>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"modal-title\">\n            Order Details - {ticket.ticketId}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Customer Information */}\n          <div>\n            <h4 className=\"font-medium text-foreground mb-4\">Customer Information</h4>\n            <div className=\"space-y-2\">\n              <p><span className=\"text-muted-foreground\">Name:</span> <span data-testid=\"customer-name\">{ticket.customer.name}</span></p>\n              <p><span className=\"text-muted-foreground\">Phone:</span> <span data-testid=\"customer-phone\">{ticket.customer.phone}</span></p>\n              {ticket.customer.email && (\n                <p><span className=\"text-muted-foreground\">Email:</span> <span data-testid=\"customer-email\">{ticket.customer.email}</span></p>\n              )}\n              {ticket.customer.address && (\n                <p><span className=\"text-muted-foreground\">Address:</span> <span data-testid=\"customer-address\">{ticket.customer.address}</span></p>\n              )}\n            </div>\n          </div>\n          \n          {/* Device Information */}\n          <div>\n            <h4 className=\"font-medium text-foreground mb-4\">Device Information</h4>\n            <div className=\"space-y-2\">\n              <p><span className=\"text-muted-foreground\">Type:</span> <span data-testid=\"device-type\">{ticket.deviceType}</span></p>\n              {ticket.deviceModel && (\n                <p><span className=\"text-muted-foreground\">Brand/Model:</span> <span data-testid=\"device-model\">{ticket.deviceModel}</span></p>\n              )}\n              {ticket.serialNumber && (\n                <p><span className=\"text-muted-foreground\">Serial Number:</span> <span data-testid=\"device-serial\">{ticket.serialNumber}</span></p>\n              )}\n              <p><span className=\"text-muted-foreground\">Issue Category:</span> <span data-testid=\"issue-category\">{ticket.issueCategory}</span></p>\n              <p><span className=\"text-muted-foreground\">Priority:</span> \n                <Badge className={`ml-2 ${getStatusColor(ticket.priority)}`} variant=\"secondary\" data-testid=\"priority-badge\">\n                  {ticket.priority}\n                </Badge>\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        {/* Service Information */}\n        <div className=\"mt-6\">\n          <h4 className=\"font-medium text-foreground mb-4\">Service Information</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <p><span className=\"text-muted-foreground\">Service Status:</span> \n                <Badge className={`ml-2 ${getStatusColor(ticket.serviceStatus)}`} variant=\"secondary\" data-testid=\"service-status-badge\">\n                  {ticket.serviceStatus}\n                </Badge>\n              </p>\n              <p><span className=\"text-muted-foreground\">Payment Status:</span> \n                <Badge className={`ml-2 ${getStatusColor(ticket.paymentStatus)}`} variant=\"secondary\" data-testid=\"payment-status-badge\">\n                  {ticket.paymentStatus}\n                </Badge>\n              </p>\n              <p><span className=\"text-muted-foreground\">Created:</span> <span data-testid=\"created-date\">{formatDate(ticket.createdAt!)}</span></p>\n              {ticket.completedAt && (\n                <p><span className=\"text-muted-foreground\">Completed:</span> <span data-testid=\"completed-date\">{formatDate(ticket.completedAt)}</span></p>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              {ticket.estimatedCost && (\n                <p><span className=\"text-muted-foreground\">Estimated Cost:</span> <span data-testid=\"estimated-cost\">â‚¹{ticket.estimatedCost}</span></p>\n              )}\n              {ticket.finalCost && (\n                <p><span className=\"text-muted-foreground\">Final Cost:</span> <span data-testid=\"final-cost\">â‚¹{ticket.finalCost}</span></p>\n              )}\n              {ticket.assignedTechnicianName && (\n                <p><span className=\"text-muted-foreground\">Assigned Technician:</span> <span data-testid=\"assigned-technician\">{ticket.assignedTechnicianName}</span></p>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        {/* Problem Description */}\n        <div className=\"mt-6\">\n          <h4 className=\"font-medium text-foreground mb-2\">Problem Description</h4>\n          <p className=\"text-sm text-muted-foreground bg-muted p-3 rounded\" data-testid=\"problem-description\">\n            {ticket.problemDescription}\n          </p>\n        </div>\n        \n        {/* Service Notes */}\n        {ticket.serviceNotes && ticket.serviceNotes.length > 0 && (\n          <div className=\"mt-6\">\n            <h4 className=\"font-medium text-foreground mb-4\">Service Notes</h4>\n            <div className=\"space-y-3\">\n              {ticket.serviceNotes.map((note) => (\n                <div key={note.id} className=\"bg-muted p-3 rounded\" data-testid={`service-note-${note.id}`}>\n                  <p className=\"text-sm\">{note.note}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {new Date(note.timestamp).toLocaleString()} \n                  </p>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        {/* Status Update Form */}\n        {showStatusUpdate && (\n          <div className=\"mt-6 border-t border-border pt-6\">\n            <StatusUpdateForm\n              ticket={ticket}\n              onClose={() => setShowStatusUpdate(false)}\n            />\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"mt-6 flex flex-wrap gap-4\">\n          {canSendMessage && (\n            <>\n              <Button\n                onClick={() => onSendMessage(ticket, 'whatsapp')}\n                className=\"bg-green-600 hover:bg-green-700\"\n                data-testid=\"button-send-whatsapp\"\n              >\n                <MessageSquare className=\"mr-2 h-4 w-4\" />\n                Send WhatsApp\n              </Button>\n              <Button\n                onClick={() => onSendMessage(ticket, 'sms')}\n                variant=\"outline\"\n                data-testid=\"button-send-sms\"\n              >\n                <Smartphone className=\"mr-2 h-4 w-4\" />\n                Send SMS\n              </Button>\n            </>\n          )}\n          <Button\n            onClick={() => setShowStatusUpdate(!showStatusUpdate)}\n            variant=\"secondary\"\n            data-testid=\"button-update-status\"\n          >\n            <Edit className=\"mr-2 h-4 w-4\" />\n            {showStatusUpdate ? 'Hide Update' : 'Update Status'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8932},"frontend/client/src/components/orders-table.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageSquare, Edit, Eye } from \"lucide-react\";\nimport { getStatusColor, formatShortDate } from \"@/lib/ticket-utils\";\nimport { type TicketWithCustomer } from \"@shared/schema\";\n\ninterface OrdersTableProps {\n  tickets: TicketWithCustomer[];\n  onShowDetails: (ticketId: string) => void;\n  onSendMessage: (ticket: TicketWithCustomer) => void;\n  userRole: string;\n  showActions?: boolean;\n}\n\n\nexport default function OrdersTable({ \n  tickets, \n  onShowDetails, \n  onSendMessage, \n  userRole,\n  showActions = true \n}: OrdersTableProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  const filteredTickets = tickets.filter(ticket => {\n    const matchesSearch = \n      ticket.ticketId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      ticket.customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      ticket.deviceType.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      ticket.problemDescription.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || ticket.serviceStatus === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle>\n            {userRole === 'technician' ? 'My Assigned Orders' : 'All Orders'}\n          </CardTitle>\n          <div className=\"flex space-x-4\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"Pending\">Pending</SelectItem>\n                <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                <SelectItem value=\"Completed\">Completed</SelectItem>\n                <SelectItem value=\"Delivered\">Delivered</SelectItem>\n              </SelectContent>\n            </Select>\n            <Input\n              placeholder=\"Search orders...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-64\"\n              data-testid=\"input-search-orders\"\n            />\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Desktop Table */}\n        <div className=\"table-responsive overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-border\">\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Ticket ID</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground w-48\">Customer</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground w-40\">Device</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground w-60\">Issue</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Service Status</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Payment Status</th>\n                <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Date</th>\n                {showActions && (\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-muted-foreground\">Actions</th>\n                )}\n              </tr>\n            </thead>\n            <tbody>\n              {filteredTickets.map((ticket) => (\n                <tr key={ticket.id} className=\"border-b border-border hover:bg-muted/50\">\n                  <td className=\"py-3 px-4 text-sm font-medium text-primary cursor-pointer\"\n                      onClick={() => onShowDetails(ticket.ticketId)}\n                      data-testid={`ticket-link-${ticket.ticketId}`}>\n                    {ticket.ticketId}\n                  </td>\n                  <td className=\"py-3 px-4 text-sm text-foreground w-48\">{ticket.customer?.name}</td>\n                  <td className=\"py-3 px-4 text-sm text-foreground w-40\">{ticket.deviceType}</td>\n                  <td className=\"py-3 px-4 text-sm text-foreground max-w-60 truncate\" title={ticket.problemDescription}>\n                    {ticket.problemDescription}\n                  </td>\n                  <td className=\"py-3 px-4\">\n                    <Badge className={getStatusColor(ticket.serviceStatus)} variant=\"secondary\">\n                      {ticket.serviceStatus}\n                    </Badge>\n                  </td>\n                  <td className=\"py-3 px-4\">\n                    <Badge className={getStatusColor(ticket.paymentStatus)} variant=\"secondary\">\n                      {ticket.paymentStatus}\n                    </Badge>\n                  </td>\n                  <td className=\"py-3 px-4 text-sm text-muted-foreground\">\n                    {formatShortDate(ticket.createdAt!)}\n                  </td>\n                  {showActions && (\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\"\n                          onClick={() => onShowDetails(ticket.ticketId)}\n                          data-testid={`button-view-${ticket.ticketId}`}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        {userRole === 'frontdesk' && ticket.serviceStatus === 'Completed' && (\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => onSendMessage(ticket)}\n                            data-testid={`button-message-${ticket.ticketId}`}\n                          >\n                            <MessageSquare className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </td>\n                  )}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        \n        {/* Mobile Cards */}\n        <div className=\"cards-responsive space-y-4\">\n          {filteredTickets.map((ticket) => (\n            <div key={ticket.id} className=\"border border-border rounded-lg p-4 hover:shadow-md transition-shadow duration-200\">\n              <div className=\"flex justify-between items-start mb-2\">\n                <h4 \n                  className=\"font-medium text-primary cursor-pointer\"\n                  onClick={() => onShowDetails(ticket.ticketId)}\n                  data-testid={`ticket-card-${ticket.ticketId}`}\n                >\n                  {ticket.ticketId}\n                </h4>\n                <div className=\"flex flex-col space-y-1\">\n                  <Badge className={getStatusColor(ticket.serviceStatus)} variant=\"secondary\">\n                    {ticket.serviceStatus}\n                  </Badge>\n                  <Badge className={getStatusColor(ticket.paymentStatus)} variant=\"secondary\">\n                    {ticket.paymentStatus}\n                  </Badge>\n                </div>\n              </div>\n              <p className=\"text-sm text-foreground mb-1\">{ticket.customer?.name} - {ticket.deviceType}</p>\n              <p className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">{ticket.problemDescription}</p>\n              <div className=\"flex justify-between items-center\">\n                <p className=\"text-xs text-muted-foreground\">{formatShortDate(ticket.createdAt!)}</p>\n                {showActions && (\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      size=\"sm\" \n                      variant=\"ghost\"\n                      onClick={() => onShowDetails(ticket.ticketId)}\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                    {userRole === 'frontdesk' && ticket.serviceStatus === 'Completed' && (\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\"\n                        onClick={() => onSendMessage(ticket)}\n                      >\n                        <MessageSquare className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {filteredTickets.length === 0 && (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No orders found matching your criteria.</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9213},"frontend/client/src/components/reports-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\r\nimport { TrendingUp, TrendingDown, DollarSign, Clock, Users, Wrench, BarChart3, Activity, Download } from \"lucide-react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport * as XLSX from 'xlsx';\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\ninterface ReportsData {\r\n  summary: {\r\n    totalTickets: number;\r\n    totalCustomers: number;\r\n    totalRevenue: number;\r\n    avgResolutionDays: number;\r\n  };\r\n  revenue: {\r\n    today: number;\r\n    thisWeek: number;\r\n    thisMonth: number;\r\n  };\r\n  statusBreakdown: {\r\n    pending: number;\r\n    inProgress: number;\r\n    waitingForParts: number;\r\n    testing: number;\r\n    completed: number;\r\n    delivered: number;\r\n  };\r\n  topIssues: Array<{ category: string; count: number }>;\r\n  recentTickets: any[];\r\n}\r\n\r\nexport default function ReportsDashboard() {\r\n  const { data: reports, isLoading } = useQuery<ReportsData>({\r\n    queryKey: ['/api/reports'],\r\n  });\r\n  const { data: customers = [] } = useQuery<any[]>({\r\n    queryKey: ['/api/customers'],\r\n  });\r\n\r\n  const downloadCustomersExcel = () => {\r\n    const worksheet = XLSX.utils.json_to_sheet(customers.map((customer: any) => ({\r\n      'Customer Name': customer.name,\r\n      'Phone': customer.phone,\r\n      'Email': customer.email || '',\r\n      'Address': customer.address || '',\r\n      'Joined Date': new Date(customer.createdAt).toLocaleDateString(),\r\n    })));\r\n    \r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Customers');\r\n    XLSX.writeFile(workbook, `customers_${new Date().toISOString().slice(0, 10)}.xlsx`);\r\n  };\r\n\r\n  const downloadOrdersExcel = () => {\r\n    if (!reports?.recentTickets) return;\r\n    \r\n    const worksheet = XLSX.utils.json_to_sheet(reports.recentTickets.map((ticket: any) => ({\r\n      'Ticket ID': ticket.ticketId,\r\n      'Customer Name': ticket.customer?.name || '',\r\n      'Phone': ticket.customer?.phone || '',\r\n      'Device Type': ticket.deviceType,\r\n      'Device Model': ticket.deviceModel || '',\r\n      'Issue Category': ticket.issueCategory,\r\n      'Problem Description': ticket.problemDescription,\r\n      'Status': ticket.serviceStatus,\r\n      'Priority': ticket.priority,\r\n      'Payment Status': ticket.paymentStatus,\r\n      'Estimated Cost': ticket.estimatedCost || '',\r\n      'Final Cost': ticket.finalCost || '',\r\n      'Advance Amount': ticket.advanceAmount || '0',\r\n      'Assigned Technician': ticket.assignedTechnicianName || '',\r\n      'Created Date': new Date(ticket.createdAt).toLocaleDateString(),\r\n      'Completed Date': ticket.completedAt ? new Date(ticket.completedAt).toLocaleDateString() : '',\r\n    })));\r\n    \r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Orders');\r\n    XLSX.writeFile(workbook, `orders_${new Date().toISOString().slice(0, 10)}.xlsx`);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n          {[...Array(4)].map((_, i) => (\r\n            <div key={i} className=\"h-32 bg-secondary animate-pulse rounded\"></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"grid gap-6 md:grid-cols-2\">\r\n          {[...Array(4)].map((_, i) => (\r\n            <div key={i} className=\"h-64 bg-secondary animate-pulse rounded\"></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!reports) {\r\n    return (\r\n      <Card>\r\n        <CardContent className=\"pt-6 text-center text-muted-foreground\">\r\n          Failed to load reports data\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const totalStatusCount = Object.values(reports.statusBreakdown).reduce((sum, count) => sum + count, 0);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Download Section */}\r\n      <div className=\"flex flex-wrap gap-4\">\r\n        <Button \r\n          onClick={downloadCustomersExcel}\r\n          className=\"flex items-center gap-2\"\r\n          data-testid=\"button-download-customers\"\r\n        >\r\n          <Download className=\"h-4 w-4\" />\r\n          Download Customers Excel\r\n        </Button>\r\n        <Button \r\n          onClick={downloadOrdersExcel}\r\n          variant=\"outline\"\r\n          className=\"flex items-center gap-2\"\r\n          disabled={!reports?.recentTickets?.length}\r\n          data-testid=\"button-download-orders\"\r\n        >\r\n          <Download className=\"h-4 w-4\" />\r\n          Download Orders Excel\r\n        </Button>\r\n      </div>\r\n      {/* Summary Cards */}\r\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n        <Card data-testid=\"card-total-tickets\">\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Tickets</CardTitle>\r\n            <Wrench className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-tickets\">\r\n              {reports.summary.totalTickets}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">All time tickets</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card data-testid=\"card-total-customers\">\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Customers</CardTitle>\r\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-customers\">\r\n              {reports.summary.totalCustomers}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">Registered customers</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card data-testid=\"card-total-revenue\">\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\r\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\" data-testid=\"text-total-revenue\">\r\n              â‚¹{reports.summary.totalRevenue.toLocaleString()}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">From completed orders</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card data-testid=\"card-avg-resolution\">\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Avg Resolution</CardTitle>\r\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\" data-testid=\"text-avg-resolution\">\r\n              {reports.summary.avgResolutionDays}\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">Days to complete</p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Revenue Breakdown */}\r\n      <div className=\"grid gap-6 md:grid-cols-2\">\r\n        <Card data-testid=\"card-revenue-breakdown\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <TrendingUp className=\"h-5 w-5\" />\r\n              Revenue Breakdown\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-sm text-muted-foreground\">Today</span>\r\n              <span className=\"font-medium\" data-testid=\"text-revenue-today\">â‚¹{reports.revenue.today.toLocaleString()}</span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-sm text-muted-foreground\">This Week</span>\r\n              <span className=\"font-medium\" data-testid=\"text-revenue-week\">â‚¹{reports.revenue.thisWeek.toLocaleString()}</span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-sm text-muted-foreground\">This Month</span>\r\n              <span className=\"font-medium\" data-testid=\"text-revenue-month\">â‚¹{reports.revenue.thisMonth.toLocaleString()}</span>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card data-testid=\"card-service-status\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Activity className=\"h-5 w-5\" />\r\n              Service Status Breakdown\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {Object.entries(reports.statusBreakdown).map(([status, count]) => {\r\n              const percentage = totalStatusCount > 0 ? (count / totalStatusCount) * 100 : 0;\r\n              const statusLabels: Record<string, string> = {\r\n                pending: \"Pending\",\r\n                inProgress: \"In Progress\", \r\n                waitingForParts: \"Waiting for Parts\",\r\n                testing: \"Testing\",\r\n                completed: \"Completed\",\r\n                delivered: \"Delivered\"\r\n              };\r\n              \r\n              const statusColors: Record<string, string> = {\r\n                pending: \"bg-yellow-500\",\r\n                inProgress: \"bg-blue-500\",\r\n                waitingForParts: \"bg-orange-500\", \r\n                testing: \"bg-purple-500\",\r\n                completed: \"bg-green-500\",\r\n                delivered: \"bg-emerald-500\"\r\n              };\r\n\r\n              return (\r\n                <div key={status} className=\"space-y-1\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-sm text-muted-foreground\">{statusLabels[status]}</span>\r\n                    <span className=\"font-medium\" data-testid={`text-status-${status}`}>{count}</span>\r\n                  </div>\r\n                  <Progress value={percentage} className=\"h-2\" />\r\n                </div>\r\n              );\r\n            })}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card data-testid=\"card-top-issues\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <BarChart3 className=\"h-5 w-5\" />\r\n              Top Issues\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-3\">\r\n              {reports.topIssues.map((issue, index) => (\r\n                <div key={issue.category} className=\"flex justify-between items-center\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Badge variant=\"outline\" className=\"text-xs\">{index + 1}</Badge>\r\n                    <span className=\"text-sm\" data-testid={`text-issue-${index}`}>{issue.category}</span>\r\n                  </div>\r\n                  <span className=\"font-medium text-sm\" data-testid={`text-issue-count-${index}`}>\r\n                    {issue.count} tickets\r\n                  </span>\r\n                </div>\r\n              ))}\r\n              {reports.topIssues.length === 0 && (\r\n                <p className=\"text-sm text-muted-foreground text-center\">No issues reported yet</p>\r\n              )}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card data-testid=\"card-recent-activity\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Clock className=\"h-5 w-5\" />\r\n              Recent Activity\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-3\">\r\n              {reports.recentTickets.slice(0, 5).map((ticket) => (\r\n                <div key={ticket.id} className=\"flex justify-between items-center border-b border-border last:border-0 pb-2 last:pb-0\">\r\n                  <div>\r\n                    <p className=\"text-sm font-medium\" data-testid={`text-ticket-${ticket.id}`}>\r\n                      {ticket.ticketId}\r\n                    </p>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      {ticket.customer?.name} - {ticket.deviceType}\r\n                    </p>\r\n                  </div>\r\n                  <Badge \r\n                    variant={ticket.serviceStatus === 'Completed' ? 'default' : 'secondary'}\r\n                    data-testid={`badge-status-${ticket.id}`}\r\n                  >\r\n                    {ticket.serviceStatus}\r\n                  </Badge>\r\n                </div>\r\n              ))}\r\n              {reports.recentTickets.length === 0 && (\r\n                <p className=\"text-sm text-muted-foreground text-center\">No recent activity</p>\r\n              )}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}","size_bytes":13034},"frontend/client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, Plus, List, CheckCircle, Users, BarChart3, Wrench, FileText, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { AuthService } from \"@/lib/auth\";\n\ninterface SidebarProps {\n  userRole: string;\n  isOpen: boolean;\n  onToggle: () => void;\n}\n\nexport default function Sidebar({ userRole, isOpen, onToggle }: SidebarProps) {\n  const [location] = useLocation();\n\n  const frontdeskNavItems = [\n    { href: \"/dashboard\", label: \"Dashboard\", icon: Home },\n    { href: \"/add-ticket\", label: \"Add Application\", icon: Plus },\n    { href: \"/orders\", label: \"All Orders\", icon: List },\n    { href: \"/completed-orders\", label: \"Completed Orders\", icon: CheckCircle },\n    { href: \"/customers\", label: \"Customers\", icon: Users },\n    { href: \"/reports\", label: \"Reports\", icon: BarChart3 },\n  ];\n\n  const technicianNavItems = [\n    { href: \"/tech-dashboard\", label: \"Dashboard\", icon: Home },\n    { href: \"/assigned-orders\", label: \"Assigned Orders\", icon: Wrench },\n    { href: \"/service-notes\", label: \"Service Notes\", icon: FileText },\n  ];\n\n  const navItems = userRole === 'frontdesk' ? frontdeskNavItems : technicianNavItems;\n\n  const handleLinkClick = () => {\n    if (window.innerWidth < 1024) {\n      onToggle();\n    }\n  };\n\n  return (\n    <>\n      {/* Mobile overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\"\n          onClick={onToggle}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`fixed inset-y-0 left-0 z-50 w-64 bg-sidebar transform transition-transform duration-200 ease-in-out lg:translate-x-0 ${\n        isOpen ? 'translate-x-0' : '-translate-x-full'\n      }`}>\n        <div className=\"flex items-center justify-center h-16 bg-sidebar-primary\">\n          <h1 className=\"text-xl font-bold text-sidebar-primary-foreground\">Satyasri</h1>\n        </div>\n        \n        <nav className=\"mt-8 px-4\">\n          <div className=\"space-y-2\">\n            {navItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n              \n              return (\n                <Link key={item.href} href={item.href}>\n                  <Button\n                    variant=\"ghost\"\n                    className={`w-full justify-start text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground ${\n                      isActive ? 'bg-sidebar-accent text-sidebar-accent-foreground' : ''\n                    }`}\n                    onClick={handleLinkClick}\n                    data-testid={`nav-${item.href.slice(1)}`}\n                  >\n                    <Icon className=\"mr-3 h-4 w-4\" />\n                    {item.label}\n                  </Button>\n                </Link>\n              );\n            })}\n          </div>\n          \n          <div className=\"mt-8 pt-8 border-t border-sidebar-border\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start text-sidebar-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\"\n              onClick={AuthService.logout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"mr-3 h-4 w-4\" />\n              Logout\n            </Button>\n          </div>\n        </nav>\n      </div>\n    </>\n  );\n}\n","size_bytes":3393},"frontend/client/src/components/stats-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Clock, CheckCircle, Users, IndianRupee, Wrench, Cog } from \"lucide-react\";\n\ninterface StatsCardsProps {\n  stats: any;\n  userRole: string;\n}\n\nexport default function StatsCards({ stats, userRole }: StatsCardsProps) {\n  if (userRole === 'technician') {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Assigned Orders</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-assigned-orders\">\n                  {stats.assignedToMe || 0}\n                </p>\n              </div>\n              <div className=\"bg-accent/10 p-3 rounded-full\">\n                <Wrench className=\"text-accent h-6 w-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">In Progress</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-in-progress\">\n                  {stats.myInProgress || 0}\n                </p>\n              </div>\n              <div className=\"bg-blue-100 p-3 rounded-full\">\n                <Cog className=\"text-blue-600 h-6 w-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Completed Today</p>\n                <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-completed-today\">\n                  {stats.myCompletedToday || 0}\n                </p>\n              </div>\n              <div className=\"bg-green-100 p-3 rounded-full\">\n                <CheckCircle className=\"text-green-600 h-6 w-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Ongoing Orders</p>\n              <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-ongoing-orders\">\n                {(stats.pendingTickets || 0) + (stats.inProgressTickets || 0)}\n              </p>\n            </div>\n            <div className=\"bg-accent/10 p-3 rounded-full\">\n              <Clock className=\"text-accent h-6 w-6\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Completed Today</p>\n              <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-completed-today\">\n                {stats.todayCompleted || 0}\n              </p>\n            </div>\n            <div className=\"bg-green-100 p-3 rounded-full\">\n              <CheckCircle className=\"text-green-600 h-6 w-6\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Customers</p>\n              <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-total-customers\">\n                {stats.totalCustomers || 0}\n              </p>\n            </div>\n            <div className=\"bg-blue-100 p-3 rounded-full\">\n              <Users className=\"text-blue-600 h-6 w-6\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Revenue (Month)</p>\n              <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-monthly-revenue\">\n                â‚¹{(stats.monthlyRevenue || 0).toLocaleString()}\n              </p>\n            </div>\n            <div className=\"bg-green-100 p-3 rounded-full\">\n              <IndianRupee className=\"text-green-600 h-6 w-6\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4791},"frontend/client/src/components/status-update-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { updateTicketStatusSchema, type UpdateTicketStatus, type TicketWithCustomer } from \"@shared/schema\";\nimport { AuthService } from \"@/lib/auth\";\n\ninterface StatusUpdateFormProps {\n  ticket: TicketWithCustomer;\n  onClose: () => void;\n}\n\nexport default function StatusUpdateForm({ ticket, onClose }: StatusUpdateFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const user = AuthService.getUser();\n\n  const form = useForm<UpdateTicketStatus>({\n    resolver: zodResolver(updateTicketStatusSchema),\n    defaultValues: {\n      serviceStatus: ticket.serviceStatus as any,\n      priority: ticket.priority as any,\n      paymentStatus: ticket.paymentStatus as any,\n      finalCost: ticket.finalCost || \"\",\n      serviceNote: \"\",\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async (data: UpdateTicketStatus) => {\n      const response = await apiRequest('PATCH', `/api/tickets/${ticket.ticketId}/status`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Status updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/tickets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/tickets', ticket.ticketId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      onClose();\n    },\n    onError: (error) => {\n      console.error('Status update error:', error);\n      toast({\n        title: \"Error\",\n        description: `Failed to update status: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UpdateTicketStatus) => {\n    updateStatusMutation.mutate(data);\n  };\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle>Update Status - {ticket.ticketId}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          {/* Service Status - Technicians can update */}\n          {user?.role === 'technician' && (\n            <div>\n              <Label>Service Status</Label>\n              <Select \n                defaultValue={ticket.serviceStatus}\n                onValueChange={(value) => form.setValue(\"serviceStatus\", value as any)}\n              >\n                <SelectTrigger data-testid=\"select-service-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Pending\">Pending</SelectItem>\n                  <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                  <SelectItem value=\"Waiting for Parts\">Waiting for Parts</SelectItem>\n                  <SelectItem value=\"Testing\">Testing</SelectItem>\n                  <SelectItem value=\"Completed\">Completed</SelectItem>\n                  <SelectItem value=\"Delivered\">Delivered</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          {/* Priority */}\n          <div>\n            <Label>Priority</Label>\n            <Select \n              defaultValue={ticket.priority}\n              onValueChange={(value) => form.setValue(\"priority\", value as any)}\n            >\n              <SelectTrigger data-testid=\"select-priority\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Low\">Low</SelectItem>\n                <SelectItem value=\"Medium\">Medium</SelectItem>\n                <SelectItem value=\"High\">High</SelectItem>\n                <SelectItem value=\"Urgent\">Urgent</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Payment Status - Both roles can update */}\n          <div>\n            <Label>Payment Status</Label>\n            <Select \n              defaultValue={ticket.paymentStatus}\n              onValueChange={(value) => form.setValue(\"paymentStatus\", value as any)}\n            >\n              <SelectTrigger data-testid=\"select-payment-status\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Pending\">Pending</SelectItem>\n                <SelectItem value=\"Advance Paid\">Advance Paid</SelectItem>\n                <SelectItem value=\"Paid\">Paid</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Final Cost */}\n          <div>\n            <Label htmlFor=\"finalCost\">Final Cost</Label>\n            <Input\n              id=\"finalCost\"\n              type=\"number\"\n              min=\"0\"\n              step=\"0.01\"\n              placeholder=\"â‚¹\"\n              {...form.register(\"finalCost\")}\n              data-testid=\"input-final-cost\"\n            />\n          </div>\n\n          {/* Service Note - Technicians only */}\n          {user?.role === 'technician' && (\n            <div>\n              <Label htmlFor=\"serviceNote\">Service Note</Label>\n              <Textarea\n                id=\"serviceNote\"\n                rows={3}\n                placeholder=\"Add a note about the service...\"\n                {...form.register(\"serviceNote\")}\n                data-testid=\"textarea-service-note\"\n              />\n            </div>\n          )}\n\n          {/* Form Actions */}\n          <div className=\"flex justify-end space-x-4 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              data-testid=\"button-cancel-update\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={updateStatusMutation.isPending}\n              data-testid=\"button-save-update\"\n            >\n              {updateStatusMutation.isPending ? \"Updating...\" : \"Update Status\"}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6606},"frontend/client/src/components/ticket-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertTicketSchema, type InsertTicket } from \"../../../shared/schema\";\nimport { useLocation } from \"wouter\";\n\nexport default function TicketForm() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InsertTicket>({\n    resolver: zodResolver(insertTicketSchema),\n    defaultValues: {\n      customerName: \"\",\n      customerPhone: \"\",\n      customerEmail: \"\",\n      customerAddress: \"\",\n      deviceType: \"\",\n      deviceModel: \"\",\n      serialNumber: \"\",\n      purchaseDate: \"\",\n      issueCategory: \"\",\n      priority: \"Medium\",\n      problemDescription: \"\",\n      estimatedCost: 500,\n    },\n    mode: \"onChange\",\n  });\n\n  const createTicketMutation = useMutation({\n    mutationFn: async (data: InsertTicket) => {\n      const response = await apiRequest('POST', '/api/tickets', data);\n      return response.json();\n    },\n    onSuccess: (ticket) => {\n      toast({\n        title: \"Success\",\n        description: `Ticket created successfully! ID: ${ticket.ticketId}`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/tickets'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      form.reset();\n      setLocation('/dashboard');\n    },\n    onError: (error) => {\n      console.error('Ticket creation error:', error);\n      toast({\n        title: \"Error\",\n        description: `Failed to create ticket: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Initialize select field values\n  useEffect(() => {\n    form.setValue(\"priority\", \"Medium\");\n  }, [form]);\n\n  const onSubmit = (data: InsertTicket) => {\n    console.log('Form data:', data);\n    console.log('Form errors:', form.formState.errors);\n    createTicketMutation.mutate(data);\n  };\n\n  const fillTestData = () => {\n    form.setValue(\"customerName\", \"John Doe\");\n    form.setValue(\"customerPhone\", \"9876543210\");\n    form.setValue(\"customerEmail\", \"john@example.com\");\n    form.setValue(\"customerAddress\", \"123 Main Street\");\n    form.setValue(\"deviceType\", \"Gaming Laptop\");\n    form.setValue(\"deviceModel\", \"Dell XPS 15\");\n    form.setValue(\"serialNumber\", \"DL123456\");\n    form.setValue(\"issueCategory\", \"Hardware\");\n    form.setValue(\"problemDescription\", \"Laptop not turning on, power button not responding\");\n    form.setValue(\"estimatedCost\", 3000);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Create New Service Request</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Customer Information */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-foreground\">Customer Information</h4>\n              \n              <div>\n                <Label htmlFor=\"customerName\">Customer Name *</Label>\n                <Input\n                  id=\"customerName\"\n                  {...form.register(\"customerName\")}\n                  data-testid=\"input-customer-name\"\n                />\n                {form.formState.errors.customerName && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.customerName.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"customerPhone\">Phone Number *</Label>\n                <Input\n                  id=\"customerPhone\"\n                  type=\"tel\"\n                  {...form.register(\"customerPhone\")}\n                  data-testid=\"input-customer-phone\"\n                />\n                {form.formState.errors.customerPhone && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.customerPhone.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"customerEmail\">Email</Label>\n                <Input\n                  id=\"customerEmail\"\n                  type=\"email\"\n                  {...form.register(\"customerEmail\")}\n                  data-testid=\"input-customer-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"customerAddress\">Address</Label>\n                <Textarea\n                  id=\"customerAddress\"\n                  rows={3}\n                  {...form.register(\"customerAddress\")}\n                  data-testid=\"textarea-customer-address\"\n                />\n              </div>\n            </div>\n            \n            {/* Device Information */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-foreground\">Device Information</h4>\n              \n              <div>\n                <Label htmlFor=\"deviceType\">Device Type *</Label>\n                <Input\n                  id=\"deviceType\"\n                  placeholder=\"e.g., Desktop PC, Laptop, Printer, etc.\"\n                  {...form.register(\"deviceType\")}\n                  data-testid=\"input-device-type\"\n                />\n                {form.formState.errors.deviceType && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.deviceType.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"deviceModel\">Brand/Model</Label>\n                <Input\n                  id=\"deviceModel\"\n                  {...form.register(\"deviceModel\")}\n                  data-testid=\"input-device-model\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"serialNumber\">Serial Number</Label>\n                <Input\n                  id=\"serialNumber\"\n                  {...form.register(\"serialNumber\")}\n                  data-testid=\"input-serial-number\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"purchaseDate\">Purchase Date</Label>\n                <Input\n                  id=\"purchaseDate\"\n                  type=\"date\"\n                  {...form.register(\"purchaseDate\")}\n                  data-testid=\"input-purchase-date\"\n                />\n              </div>\n            </div>\n          </div>\n          \n          {/* Service Information */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium text-foreground\">Service Information</h4>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label>Issue Category *</Label>\n                <Select \n                  onValueChange={(value) => form.setValue(\"issueCategory\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-issue-category\">\n                    <SelectValue placeholder=\"Select Category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Hardware\">Hardware Issue</SelectItem>\n                    <SelectItem value=\"Software\">Software Issue</SelectItem>\n                    <SelectItem value=\"Network\">Network Issue</SelectItem>\n                    <SelectItem value=\"Maintenance\">Maintenance</SelectItem>\n                    <SelectItem value=\"Upgrade\">Upgrade</SelectItem>\n                    <SelectItem value=\"Other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.issueCategory && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.issueCategory.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label>Priority</Label>\n                <Select \n                  defaultValue=\"Medium\"\n                  onValueChange={(value) => form.setValue(\"priority\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-priority\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Low\">Low</SelectItem>\n                    <SelectItem value=\"Medium\">Medium</SelectItem>\n                    <SelectItem value=\"High\">High</SelectItem>\n                    <SelectItem value=\"Urgent\">Urgent</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"problemDescription\">Problem Description *</Label>\n              <Textarea\n                id=\"problemDescription\"\n                rows={4}\n                placeholder=\"Describe the issue in detail...\"\n                {...form.register(\"problemDescription\")}\n                data-testid=\"textarea-problem-description\"\n              />\n              {form.formState.errors.problemDescription && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.problemDescription.message}\n                </p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"estimatedCost\">Estimated Cost</Label>\n              <Input\n                id=\"estimatedCost\"\n                type=\"number\"\n                min=\"0\"\n                step=\"0.01\"\n                placeholder=\"â‚¹\"\n                {...form.register(\"estimatedCost\")}\n                data-testid=\"input-estimated-cost\"\n              />\n            </div>\n          </div>\n          \n          {/* Form Actions */}\n          <div className=\"flex justify-end space-x-4 pt-6 border-t border-border\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setLocation('/dashboard')}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={fillTestData}\n              className=\"mr-2\"\n            >\n              Fill Test Data\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createTicketMutation.isPending}\n              data-testid=\"button-create-ticket\"\n            >\n              {createTicketMutation.isPending ? \"Creating...\" : \"Create Ticket\"}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11224},"frontend/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"frontend/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"frontend/client/src/lib/api.ts":{"content":"// API configuration for communicating with backend\nconst API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000';\n\nexport const apiRequest = async (method: string, endpoint: string, data?: any) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  \n  const options: RequestInit = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n  };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n  \n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  return response;\n};\n\nexport { API_BASE_URL };","size_bytes":651},"frontend/client/src/lib/auth.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\n\nexport interface User {\n  id: string;\n  username: string;\n  fullName: string;\n  role: string;\n  email?: string;\n  phone?: string;\n}\n\nexport interface AuthResponse {\n  user: User;\n  token: string;\n}\n\nexport class AuthService {\n  private static TOKEN_KEY = 'satyasri_auth_token';\n  private static USER_KEY = 'satyasri_user';\n\n  static getToken(): string | null {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n\n  static getUser(): User | null {\n    const userData = localStorage.getItem(this.USER_KEY);\n    return userData ? JSON.parse(userData) : null;\n  }\n\n  static setAuth(authData: AuthResponse): void {\n    localStorage.setItem(this.TOKEN_KEY, authData.token);\n    localStorage.setItem(this.USER_KEY, JSON.stringify(authData.user));\n  }\n\n  static clearAuth(): void {\n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.USER_KEY);\n  }\n\n  static isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  static getAuthHeaders(): Record<string, string> {\n    const token = this.getToken();\n    return token ? { Authorization: `Bearer ${token}` } : {};\n  }\n\n  static async login(username: string, password: string, role: string): Promise<AuthResponse> {\n    const response = await apiRequest('POST', '/api/auth/login', {\n      username,\n      password,\n      role\n    });\n\n    const authData = await response.json();\n    this.setAuth(authData);\n    return authData;\n  }\n\n  static async verifyToken(): Promise<User> {\n    const token = this.getToken();\n    if (!token) {\n      throw new Error('No token found');\n    }\n\n    try {\n      const response = await fetch('/api/auth/verify', {\n        headers: this.getAuthHeaders(),\n        credentials: 'include'\n      });\n\n    if (!response.ok) {\n        this.clearAuth();\n        throw new Error('Token verification failed');\n      }\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        this.clearAuth();\n        throw new Error('Invalid response format');\n      }\n      const { user } = await response.json();\n      localStorage.setItem(this.USER_KEY, JSON.stringify(user));\n      return user;\n    } catch (error) {\n      this.clearAuth();\n      throw error;\n    }\n  }\n\n  static logout(): void {\n  AuthService.clearAuth();\n  window.location.href = '/';\n}\n\n}\n","size_bytes":2382},"frontend/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { AuthService } from \"./auth\";\nimport { API_BASE_URL } from \"./api\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const fullUrl = url.startsWith('http') ? url : `${API_BASE_URL}${url}`;\n  \n  const headers: Record<string, string> = {\n    ...AuthService.getAuthHeaders(),\n  };\n\n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n\n  const res = await fetch(fullUrl, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const url = queryKey.join(\"/\") as string;\n    const fullUrl = url.startsWith('http') ? url : `${API_BASE_URL}${url}`;\n    \n    const res = await fetch(fullUrl, {\n      headers: AuthService.getAuthHeaders(),\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});","size_bytes":1794},"frontend/client/src/lib/ticket-utils.ts":{"content":"export function generateTicketId(): string {\n  const today = new Date();\n  const dateStr = today.toISOString().slice(0, 10).replace(/-/g, '');\n  const sequence = String(Math.floor(Math.random() * 9999) + 1).padStart(4, '0');\n  return `SATY-${dateStr}-${sequence}`;\n}\n\nexport function formatDate(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-IN', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n  });\n}\n\nexport function formatShortDate(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-IN', {\n    day: '2-digit',\n    month: '2-digit'\n  });\n}\n\nexport function getStatusColor(status: string): string {\n  const colors = {\n    'Pending': 'bg-yellow-100 text-yellow-700',\n    'In Progress': 'bg-blue-100 text-blue-700',\n    'Waiting for Parts': 'bg-orange-100 text-orange-700',\n    'Testing': 'bg-purple-100 text-purple-700',\n    'Completed': 'bg-green-100 text-green-700',\n    'Delivered': 'bg-gray-100 text-gray-700',\n    'Paid': 'bg-green-100 text-green-700'\n  };\n  return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-700';\n}\n\nexport function getPriorityColor(priority: string): string {\n  const colors = {\n    'Low': 'bg-green-100 text-green-700',\n    'Medium': 'bg-blue-100 text-blue-700',\n    'High': 'bg-orange-100 text-orange-700',\n    'Urgent': 'bg-red-100 text-red-700'\n  };\n  return colors[priority as keyof typeof colors] || 'bg-gray-100 text-gray-700';\n}\nexport function generateTicketId(): string {\n  const today = new Date();\n  const dateStr = today.toISOString().slice(0, 10).replace(/-/g, '');\n  const sequence = String(Math.floor(Math.random() * 9999) + 1).padStart(4, '0');\n  return `SATY-${dateStr}-${sequence}`;\n}\n\nexport function formatDate(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-IN', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n  });\n}\n\nexport function formatShortDate(date: Date | string): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-IN', {\n    day: '2-digit',\n    month: '2-digit'\n  });\n}\n\nexport function getStatusColor(status: string): string {\n  const colors = {\n    'Pending': 'bg-yellow-100 text-yellow-700',\n    'In Progress': 'bg-blue-100 text-blue-700',\n    'Waiting for Parts': 'bg-orange-100 text-orange-700',\n    'Testing': 'bg-purple-100 text-purple-700',\n    'Completed': 'bg-green-100 text-green-700',\n    'Delivered': 'bg-gray-100 text-gray-700',\n    'Paid': 'bg-green-100 text-green-700'\n  };\n  return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-700';\n}\n\nexport function getPriorityColor(priority: string): string {\n  const colors = {\n    'Low': 'bg-green-100 text-green-700',\n    'Medium': 'bg-blue-100 text-blue-700',\n    'High': 'bg-orange-100 text-orange-700',\n    'Urgent': 'bg-red-100 text-red-700'\n  };\n  return colors[priority as keyof typeof colors] || 'bg-gray-100 text-gray-700';\n}\n","size_bytes":3110},"frontend/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"frontend/client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { AuthService } from \"@/lib/auth\";\nimport Sidebar from \"@/components/sidebar\";\nimport StatsCards from \"@/components/stats-cards\";\nimport OrdersTable from \"@/components/orders-table\";\nimport TicketForm from \"@/components/ticket-form\";\nimport OrderDetailsModal from \"@/components/order-details-modal\";\nimport MessageModal from \"@/components/message-modal\";\nimport { type TicketWithCustomer } from \"../../../shared/schema\";\nimport CustomersList from \"@/components/customers-list\";\nimport ReportsDashboard from \"@/components/reports-dashboard\";\n\nexport default function Dashboard() {\n  const [location, setLocation] = useLocation();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [selectedTicketId, setSelectedTicketId] = useState<string | null>(null);\n  const [messageTicket, setMessageTicket] = useState<TicketWithCustomer | null>(null);\n  const [messageType, setMessageType] = useState<'whatsapp' | 'sms'>('whatsapp');\n\n  const user = AuthService.getUser();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!user) {\n      setLocation('/');\n      return;\n    }\n  }, [user, setLocation]);\n\n  // Redirect to appropriate dashboard based on role\n  useEffect(() => {\n    if (user && location === '/dashboard') {\n      if (user.role === 'technician') {\n        setLocation('/tech-dashboard');\n      }\n    }\n  }, [user, location, setLocation]);\n\n  const { data: stats } = useQuery({\n    queryKey: ['/api/stats'],\n    enabled: !!user,\n  });\n\n  const { data: tickets = [] } = useQuery<TicketWithCustomer[]>({\n    queryKey: ['/api/tickets'],\n    enabled: !!user,\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  const handleShowDetails = (ticketId: string) => {\n    setSelectedTicketId(ticketId);\n  };\n\n  const handleSendMessage = (ticket: TicketWithCustomer, type: 'whatsapp' | 'sms' = 'whatsapp') => {\n    setMessageTicket(ticket);\n    setMessageType(type);\n  };\n\n  const getPageTitle = () => {\n    const pageTitles: Record<string, string> = {\n      '/dashboard': 'Dashboard',\n      '/tech-dashboard': 'Technician Dashboard',\n      '/add-ticket': 'Create New Ticket',\n      '/orders': 'All Orders',\n      '/completed-orders': 'Completed Orders',\n      '/customers': 'Customers',\n      '/reports': 'Reports',\n      '/assigned-orders': 'Assigned Orders',\n      '/service-notes': 'Service Notes',\n    };\n    return pageTitles[location] || 'Dashboard';\n  };\n\n  const renderContent = () => {\n    switch (location) {\n      case '/add-ticket':\n        return user.role === 'frontdesk' ? <TicketForm /> : null;\n\n      case '/orders':\n        return user.role === 'frontdesk' ? (\n          <OrdersTable\n            tickets={tickets}\n            onShowDetails={handleShowDetails}\n            onSendMessage={handleSendMessage}\n            userRole={user.role}\n          />\n        ) : null;\n\n      case '/completed-orders':\n        const completedTickets = tickets.filter(t => t.serviceStatus === 'Completed' || t.serviceStatus === 'Delivered');\n        return user.role === 'frontdesk' ? (\n          <OrdersTable\n            tickets={completedTickets}\n            onShowDetails={handleShowDetails}\n            onSendMessage={handleSendMessage}\n            userRole={user.role}\n          />\n        ) : null;\n\n      case '/assigned-orders':\n        return user.role === 'technician' ? (\n          <OrdersTable\n            tickets={tickets}\n            onShowDetails={handleShowDetails}\n            onSendMessage={handleSendMessage}\n            userRole={user.role}\n          />\n        ) : null;\n\n      case '/tech-dashboard':\n        return user.role === 'technician' ? (\n          <div className=\"space-y-6\">\n            <StatsCards stats={stats || {}} userRole={user.role} />\n            <OrdersTable\n              tickets={tickets.slice(0, 5)}\n              onShowDetails={handleShowDetails}\n              onSendMessage={handleSendMessage}\n              userRole={user.role}\n              showActions={false}\n            />\n          </div>\n        ) : null;\n\n      case '/customers':\n        return user.role === 'frontdesk' ? <CustomersList /> : null;\n      case '/reports':\n        return user.role === 'frontdesk' ? <ReportsDashboard /> : null;\n      case '/service-notes':\n        return (\n          <div className=\"bg-card rounded-lg p-6 shadow-sm border border-border\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">{getPageTitle()}</h3>\n            <p className=\"text-muted-foreground\">This section will be implemented in a future update.</p>\n          </div>\n        );\n\n      default:\n        // Dashboard home\n        return (\n          <div className=\"space-y-6\">\n            <StatsCards stats={stats || {}} userRole={user.role} />\n\n            <div className=\"bg-card rounded-lg shadow-sm border border-border\">\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Recent Orders</h3>\n              </div>\n              <div className=\"p-6\">\n                <OrdersTable\n                  tickets={tickets.slice(0, 5)}\n                  onShowDetails={handleShowDetails}\n                  onSendMessage={handleSendMessage}\n                  userRole={user.role}\n                  showActions={false}\n                />\n              </div>\n            </div>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar \n        userRole={user.role} \n        isOpen={sidebarOpen} \n        onToggle={() => setSidebarOpen(!sidebarOpen)} \n      />\n\n      {/* Mobile menu button */}\n      <div className=\"lg:hidden fixed top-4 left-4 z-30\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setSidebarOpen(!sidebarOpen)}\n          data-testid=\"button-mobile-menu\"\n        >\n          <Menu className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"lg:ml-64\">\n        {/* Top Bar */}\n        <header className=\"bg-card shadow-sm border-b border-border\">\n          <div className=\"flex items-center justify-between px-6 py-4\">\n            <h2 className=\"text-2xl font-semibold text-foreground\" data-testid=\"page-title\">\n              {getPageTitle()}\n            </h2>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground bg-secondary px-3 py-1 rounded-full\" data-testid=\"user-role\">\n                {user.role === 'frontdesk' ? 'Front Desk Staff' : 'Technician'}\n              </span>\n              <div className=\"h-8 w-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-medium\">{user.fullName.charAt(0)}</span>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"p-6 fade-in\">\n          {renderContent()}\n        </main>\n      </div>\n\n      {/* Modals */}\n      <OrderDetailsModal\n        isOpen={!!selectedTicketId}\n        onClose={() => setSelectedTicketId(null)}\n        ticketId={selectedTicketId}\n        onSendMessage={handleSendMessage}\n      />\n\n      <MessageModal\n        isOpen={!!messageTicket}\n        onClose={() => setMessageTicket(null)}\n        ticket={messageTicket}\n        initialType={messageType}\n      />\n    </div>\n  );\n}\n","size_bytes":7554},"frontend/client/src/pages/loading.tsx":{"content":"export default function LoadingPage() {\n  return (\n    <div className=\"fixed inset-0 bg-background flex items-center justify-center z-50\">\n      <div className=\"text-center\">\n        <div className=\"loading-spinner mx-auto mb-4\"></div>\n        <h2 className=\"text-xl font-semibold text-foreground mb-2\">SATYASRI COMPUTERS</h2>\n        <p className=\"text-muted-foreground\">Loading Service Center...</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":433},"frontend/client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AuthService } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface LoginPageProps {\n  onLogin: () => void;\n}\n\nexport default function LoginPage({ onLogin }: LoginPageProps) {\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    role: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.username || !formData.password || !formData.role) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      await AuthService.login(formData.username, formData.password, formData.role);\n      toast({\n        title: \"Success\",\n        description: \"Logged in successfully\"\n      });\n      onLogin();\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: \"Invalid credentials. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-background flex items-center justify-center\">\n      <Card className=\"w-full max-w-md mx-4 fade-in\">\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-primary mb-2\">SATYASRI</h1>\n            <h2 className=\"text-2xl font-bold text-foreground\">COMPUTERS</h2>\n            <p className=\"text-muted-foreground mt-2\">Service Center Management</p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"username\" className=\"block text-sm font-medium text-foreground mb-2\">\n                Username\n              </Label>\n              <Input\n                id=\"username\"\n                name=\"username\"\n                type=\"text\"\n                value={formData.username}\n                onChange={(e) => handleInputChange('username', e.target.value)}\n                data-testid=\"input-username\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\" className=\"block text-sm font-medium text-foreground mb-2\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={(e) => handleInputChange('password', e.target.value)}\n                data-testid=\"input-password\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label className=\"block text-sm font-medium text-foreground mb-2\">\n                Role\n              </Label>\n              <Select value={formData.role} onValueChange={(value) => handleInputChange('role', value)}>\n                <SelectTrigger data-testid=\"select-role\">\n                  <SelectValue placeholder=\"Select Role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"frontdesk\">Front Desk Staff</SelectItem>\n                  <SelectItem value=\"technician\">Technician</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"Logging in...\" : \"Login\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-xs text-muted-foreground text-center\">\n            <p>Demo Credentials:</p>\n            <p>Frontdesk: admin / admin123</p>\n            <p>Technician: tech1 / tech123</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4389},"frontend/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"frontend/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"frontend/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"frontend/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"frontend/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"frontend/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"frontend/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"frontend/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"frontend/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"frontend/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"frontend/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"frontend/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"frontend/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"frontend/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"frontend/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"frontend/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"frontend/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"frontend/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"frontend/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"frontend/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"frontend/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"frontend/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"frontend/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"frontend/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"frontend/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"frontend/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"frontend/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"frontend/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"frontend/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"frontend/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"frontend/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"frontend/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"frontend/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"frontend/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"frontend/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"frontend/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"frontend/client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"frontend/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"frontend/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"frontend/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"frontend/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"frontend/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"frontend/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"frontend/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"frontend/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"frontend/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"frontend/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"frontend/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}